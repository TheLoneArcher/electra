{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Event Organizing Platform\n\n## Overview\n\nThe Event Organizing Platform is a full-stack web application that enables users to create, discover, and participate in local and college-level events. The platform features a modern React frontend with Express.js backend, PostgreSQL database with Drizzle ORM, and integrates Google authentication and calendar synchronization. Users can browse events by categories, RSVP to events, leave reviews, and receive notifications. The application supports both light and dark themes with a responsive design using Tailwind CSS and shadcn/ui components.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUI Preferences: \n- Subtle glow effects instead of intense ones\n- Electric animations for visual enhancement\n- Clean dashboard with empty states when no data exists\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/build tooling\n- **Routing**: Wouter for client-side routing with declarative route definitions\n- **UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form schemas\n- **Styling**: Tailwind CSS with CSS variables for theming, PostCSS for processing\n\nThe frontend follows a component-based architecture with reusable UI components, custom hooks for business logic, and centralized query management. The application supports both light and dark themes through a context-based theme provider.\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema evolution\n- **Session Management**: In-memory storage abstraction (prepared for database-backed sessions)\n- **Error Handling**: Centralized error middleware with structured error responses\n\nThe backend implements a layered architecture with route handlers, storage abstraction layer, and clear separation of concerns. The storage interface provides a clean API for data operations while abstracting the underlying database implementation.\n\n### Database Schema Design\n- **Users Table**: Stores user profiles with Google OAuth integration (email, name, avatar, googleId)\n- **Event Categories**: Predefined categories with icons and colors for event classification\n- **Events Table**: Core event data including title, description, location, datetime, capacity, pricing\n- **RSVPs Table**: Many-to-many relationship between users and events with status tracking\n- **Event Reviews**: User feedback system with ratings and comments for completed events\n- **Event Photos**: Support for multiple images per event\n- **Notifications**: User notification system for event updates and reminders\n\nThe schema uses UUID primary keys, proper foreign key relationships, and JSON fields for flexible data like tags and metadata.\n\n### Authentication & Authorization\n- **OAuth Provider**: Google Sign-In integration for user authentication\n- **Session Management**: Prepared infrastructure for session-based authentication\n- **Authorization**: Role-based access control for different user types (attendees, hosts, admins)\n\n### External Service Integrations\n- **Google Calendar API**: Automatic event synchronization to user calendars upon RSVP\n- **Google Maps API**: Location services for event venues and mapping\n- **Image Storage**: Support for event image uploads and management\n- **Email Service**: Notification delivery system for event updates and reminders\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity for serverless environments\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect for database operations\n- **express**: Web application framework for the REST API server\n- **react**: Frontend framework with TypeScript support\n- **@tanstack/react-query**: Server state management and caching library\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives (dialog, dropdown, form controls)\n- **tailwindcss**: Utility-first CSS framework for responsive design\n- **class-variance-authority**: Type-safe utility for conditional CSS classes\n- **lucide-react**: Modern icon library with React components\n\n### Development and Build Tools\n- **vite**: Fast build tool and development server with React plugin\n- **typescript**: Type checking and development tooling\n- **drizzle-kit**: Database migration and schema management CLI\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay for Replit environment\n\n### Form and Validation\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Integration adapters for validation libraries\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Automatic Zod schema generation from Drizzle tables\n\n### Additional Libraries\n- **wouter**: Lightweight client-side routing library\n- **date-fns**: Modern date utility library for formatting and manipulation\n- **recharts**: Composable charting library for analytics dashboards\n- **embla-carousel-react**: Touch-friendly carousel component for image galleries\n\n## Recent Changes (August 2025)\n\n### UI Improvements\n- **Subtle Glow Effects**: Reduced intensity of glow animations by 50% with lower opacity values and longer duration\n- **Electric Animations**: Added electric-spark, electric-pulse, and lightning-bolt animations to landing page for dynamic visual appeal\n- **Dashboard Empty States**: Implemented proper empty state handling for charts and RSVPs when no events are hosted\n\n### Authentication Fix\n- **Google OAuth**: Fixed OAuth strategy initialization to handle missing credentials gracefully without crashing the server\n- **Conditional Setup**: Google authentication now conditionally initializes only when credentials are available\n\n### Data Integrity\n- **Dashboard Analytics**: Replaced mock chart data with dynamic data generation based on actual hosted events\n- **Real-time Updates**: Charts now properly reflect user's actual event data or show empty states appropriately\n\n### Current Issues Addressed\n- ✅ Glow effects made more subtle\n- ✅ Electric animations added to landing page\n- ✅ Dashboard shows empty states when no events hosted\n- ✅ OAuth error fixed\n- ✅ Google Calendar sync (simplified working version)\n- ✅ Notification system (fully functional)\n- ✅ Favorite button functionality (working with backend)\n- ✅ Event announcements (appears in event cards)\n- ✅ Photo upload functionality (working with URL input)\n- ✅ Real attendee counts (replaced fake avatars)\n\n## Latest Fixes (January 2025)\n\n### Notification System Improvements\n- **Enhanced Reminder Schedule**: Added both 1-day and 1-hour event reminders\n- **Dual Background Jobs**: Daily job for 1-day reminders, hourly job for 1-hour reminders\n- **Improved Messaging**: Different notification titles and messages for different reminder times\n\n### Dashboard Event Management\n- **Working Buttons**: Fixed \"View Details\", \"Manage Event\", and \"Add to Calendar\" buttons\n- **Event Details Modal**: Integrated EventDetailsModal for proper event viewing\n- **Calendar Integration**: Added Google Calendar authorization flow with popup windows\n- **User Feedback**: Toast notifications for all button interactions\n\n### Google Calendar Integration\n- **Authorization Flow**: Complete OAuth flow with callback handling\n- **Calendar API Routes**: Added /api/calendar/auth-url and /api/calendar/callback endpoints  \n- **User Notifications**: Calendar sync status notifications in notification system\n- **Error Handling**: Proper error messages and retry mechanisms\n\n### API Key Integration\n- **Google API Key**: Added support for GOOGLE_API_KEY environment variable\n- **Enhanced Security**: Conditional OAuth initialization to prevent server crashes\n\n## Current Updates (August 2025)\n\n### Event Sorting and Organization\n- **Host Dashboard Events**: Created events now sorted by newest first (createdAt), then by event date\n- **General Event Listing**: All events sorted by creation date (newest first), then by event timing\n- **Hosted Events API**: Enhanced getMyHostedEvents method with proper sorting logic\n\n### Enhanced RSVP Notification System\n- **RSVP Confirmation**: Users now receive detailed confirmation notifications with event timing and location\n- **Host Notifications**: Event hosts receive notifications when someone RSVPs to their events\n- **Calendar Sync Prompts**: Automatic calendar sync notifications sent after RSVP confirmation\n- **Formatted Date/Time**: Notifications include properly formatted event dates and times\n\n### Improved Google Calendar Integration\n- **Enhanced Calendar Sync**: Updated calendar sync route with better error handling and user feedback\n- **Event Details in Sync**: Calendar events include comprehensive event information (title, date, time, location)\n- **Sync Status Notifications**: Users receive notifications about calendar sync success/failure\n- **Authorization Flow**: Improved Google Calendar authorization with better user guidance\n\n### Notification System Improvements\n- **Notification Sorting**: All notifications sorted by newest first (createdAt)\n- **Enhanced Message Types**: Added rsvp_confirmation and improved calendar_sync notifications\n- **Better User Experience**: Clearer notification messages with actionable information","size_bytes":9616},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport session from 'express-session';\nimport type { Express } from 'express';\nimport { storage } from './storage';\n\nexport function setupAuth(app: Express) {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-here',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Passport middleware\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Google OAuth Strategy - Fix redirect URI\n  const domain = process.env.REPLIT_DOMAINS || 'localhost:5000';\n  const callbackURL = domain.includes('localhost') ? `http://${domain}/api/auth/google/callback` : `https://${domain}/api/auth/google/callback`;\n  \n  console.log('Google OAuth callback URL:', callbackURL);\n    \n  // Only set up Google strategy if credentials are available\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL\n    },\n  async (accessToken, refreshToken, profile, done) => {\n    try {\n      // Check if user exists\n      let user = await storage.getUserByGoogleId(profile.id);\n      \n      if (user) {\n        return done(null, user);\n      }\n\n      // Create new user\n      user = await storage.createUser({\n        name: profile.displayName || '',\n        email: profile.emails?.[0]?.value || '',\n        avatar: profile.photos?.[0]?.value || null,\n        googleId: profile.id\n      });\n\n      return done(null, user);\n    } catch (error) {\n      return done(error, undefined);\n    }\n  }));\n  } else {\n    console.warn('Google OAuth credentials not found. Google authentication will be disabled.');\n  }\n  \n  console.log('Google OAuth setup completed. Credentials available:', !!(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET));\n\n  // Serialize user for session\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  // Deserialize user from session\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n}\n\n// Middleware to check if user is authenticated\nexport function requireAuth(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: 'Not authenticated' });\n}\n\n// Middleware to get current user (optional auth)\nexport function getCurrentUser(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    req.currentUser = req.user;\n  } else {\n    req.currentUser = null;\n  }\n  next();\n}","size_bytes":2901},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { eventReminderSystem } from \"./eventReminders\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Start the event reminder system\n  console.log(\"🔔 Starting event reminder system...\");\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2219},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport passport from 'passport';\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, getCurrentUser } from \"./auth\";\nimport { \n  insertEventSchema, \n  insertRsvpSchema, \n  insertEventReviewSchema,\n  insertEventPhotoSchema,\n  insertNotificationSchema,\n  insertAnnouncementSchema,\n  insertFavoriteSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { createCalendarEvent, getCalendarAuthUrl, exchangeCodeForTokens } from \"./calendar\";\nimport { notificationManager } from \"./notifications\";\nimport { eventReminderSystem } from \"./eventReminders\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Google OAuth routes\n  app.get('/api/auth/google', \n    passport.authenticate('google', { scope: ['profile', 'email'] })\n  );\n\n  app.get('/api/auth/google/callback', \n    passport.authenticate('google', { failureRedirect: '/' }),\n    (req, res) => {\n      res.redirect('/');\n    }\n  );\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  app.get('/api/auth/me', (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json({ user: req.user });\n    } else {\n      res.status(401).json({ message: 'Not authenticated' });\n    }\n  });\n\n  // Legacy auth routes (keeping for compatibility)\n  app.post(\"/api/auth/google\", async (req, res) => {\n    try {\n      const { token, user: googleUser } = req.body;\n      \n      // In a real app, verify the Google token here\n      // For now, we'll just create/find the user\n      let user = await storage.getUserByEmail(googleUser.email);\n      \n      if (!user) {\n        user = await storage.createUser({\n          email: googleUser.email,\n          name: googleUser.name,\n          avatar: googleUser.picture,\n          googleId: googleUser.sub,\n        });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (req.isAuthenticated && req.isAuthenticated() && req.user) {\n      res.json({ user: req.user });\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Event categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getEventCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Events\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const { category, isPaid, status, hostId, search } = req.query;\n      \n      const filters: any = {};\n      if (category) filters.category = category as string;\n      if (isPaid !== undefined) filters.isPaid = isPaid === \"true\";\n      if (status) filters.status = status as string;\n      if (hostId) filters.hostId = hostId as string;\n      if (search) filters.search = search as string;\n\n      const events = await storage.getEvents(filters);\n      \n      // Enrich events with category info and RSVP counts\n      const enrichedEvents = await Promise.all(\n        events.map(async (event) => {\n          const category = await storage.getEventCategory(event.categoryId);\n          const rsvps = await storage.getRsvpsByEvent(event.id);\n          const attendingCount = rsvps.filter(rsvp => rsvp.status === \"attending\").length;\n          \n          return {\n            ...event,\n            category,\n            attendingCount,\n          };\n        })\n      );\n      \n      res.json(enrichedEvents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      const category = await storage.getEventCategory(event.categoryId);\n      const rsvps = await storage.getRsvpsByEvent(event.id);\n      const reviews = await storage.getEventReviews(event.id);\n      const photos = await storage.getEventPhotos(event.id);\n      const host = await storage.getUser(event.hostId);\n      \n      const attendingCount = rsvps.filter(rsvp => rsvp.status === \"attending\").length;\n      const averageRating = reviews.length > 0 \n        ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length \n        : 0;\n      \n      res.json({\n        ...event,\n        category,\n        host,\n        attendingCount,\n        reviews,\n        photos,\n        averageRating,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post(\"/api/events\", requireAuth, async (req: any, res) => {\n    try {\n      const validatedData = insertEventSchema.parse({\n        ...req.body,\n        hostId: req.user.id, // Set host to current user\n        dateTime: new Date(req.body.dateTime), // Convert string to Date\n        status: \"upcoming\",\n      });\n      const event = await storage.createEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Event creation error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.put(\"/api/events/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const existingEvent = await storage.getEvent(req.params.id);\n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      // Check if user is the host\n      if (existingEvent.hostId !== req.user.id) {\n        return res.status(403).json({ message: \"Only event hosts can edit events\" });\n      }\n      \n      const validatedData = insertEventSchema.partial().parse({\n        ...req.body,\n        dateTime: req.body.dateTime ? new Date(req.body.dateTime) : undefined,\n      });\n      \n      const event = await storage.updateEvent(req.params.id, validatedData);\n      res.json(event);\n    } catch (error) {\n      console.error(\"Event update error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/events/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const existingEvent = await storage.getEvent(req.params.id);\n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      // Check if user is the host\n      if (existingEvent.hostId !== req.user.id) {\n        return res.status(403).json({ message: \"Only event hosts can delete events\" });\n      }\n      \n      const success = await storage.deleteEvent(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json({ message: \"Event deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // RSVPs\n  app.get(\"/api/events/:eventId/rsvps\", async (req, res) => {\n    try {\n      const rsvps = await storage.getRsvpsByEvent(req.params.eventId);\n      res.json(rsvps);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch RSVPs\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/rsvp\", requireAuth, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      \n      // Check if RSVP already exists\n      const existingRsvp = await storage.getRsvp(req.params.eventId, req.user.id);\n      \n      if (existingRsvp) {\n        const updatedRsvp = await storage.updateRsvp(req.params.eventId, req.user.id, status);\n        res.json(updatedRsvp);\n      } else {\n        const validatedData = insertRsvpSchema.parse({\n          eventId: req.params.eventId,\n          userId: req.user.id,\n          status,\n        });\n        const rsvp = await storage.createRsvp(validatedData);\n        \n        // Send immediate notifications for new RSVP\n        if (status === 'attending') {\n          const event = await storage.getEvent(req.params.eventId);\n          if (event) {\n            // Send notification to event host\n            if (event.hostId !== req.user.id) {\n              try {\n                await storage.createNotification({\n                  userId: event.hostId,\n                  type: \"rsvp_update\",\n                  title: \"New RSVP 🎉\",\n                  message: `${req.user.name} is attending your event \"${event.title}\"`,\n                  eventId: event.id,\n                });\n                console.log(`Host notification sent for RSVP to event: ${event.title}`);\n              } catch (error) {\n                console.error(\"Failed to send host notification:\", error);\n              }\n            }\n            \n            // Send confirmation notification to the user who RSVP'd\n            const eventDate = new Date(event.dateTime);\n            const formattedDate = eventDate.toLocaleDateString('en-US', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            });\n            const formattedTime = eventDate.toLocaleTimeString('en-US', { \n              hour: 'numeric', \n              minute: '2-digit', \n              hour12: true \n            });\n            \n            try {\n              await storage.createNotification({\n                userId: req.user.id,\n                type: \"rsvp_confirmation\",\n                title: \"RSVP Confirmed! ✅\",\n                message: `You're all set for \"${event.title}\" on ${formattedDate} at ${formattedTime}. Location: ${event.location}`,\n                eventId: event.id,\n              });\n              console.log(`RSVP confirmation sent to user: ${req.user.name} for event: ${event.title}`);\n            } catch (error) {\n              console.error(\"Failed to send RSVP confirmation:\", error);\n            }\n            \n            // Automatically create a calendar sync notification\n            try {\n              await storage.createNotification({\n                userId: req.user.id,\n                type: \"calendar_sync\",\n                title: \"Add to Calendar 📅\",\n                message: `Sync \"${event.title}\" to your Google Calendar to never miss it!`,\n                eventId: event.id,\n              });\n              console.log(`Calendar sync notification sent to user: ${req.user.name}`);\n            } catch (error) {\n              console.error(\"Failed to send calendar sync notification:\", error);\n            }\n          }\n        }\n        \n        res.status(201).json(rsvp);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid RSVP data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create/update RSVP\" });\n    }\n  });\n\n  app.delete(\"/api/events/:eventId/rsvp/:userId\", async (req, res) => {\n    try {\n      const success = await storage.deleteRsvp(req.params.eventId, req.params.userId);\n      if (!success) {\n        return res.status(404).json({ message: \"RSVP not found\" });\n      }\n      res.json({ message: \"RSVP deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete RSVP\" });\n    }\n  });\n\n  // Get current user's RSVP for specific event\n  app.get(\"/api/events/:eventId/user-rsvp\", requireAuth, async (req: any, res) => {\n    try {\n      const rsvp = await storage.getRsvp(req.params.eventId, req.user.id);\n      res.json(rsvp);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user RSVP\" });\n    }\n  });\n\n  // Current user's RSVPs\n  app.get(\"/api/my-rsvps\", requireAuth, async (req: any, res) => {\n    try {\n      const rsvps = await storage.getRsvpsByUser(req.user.id);\n      \n      // Enrich with event data\n      const enrichedRsvps = await Promise.all(\n        rsvps.map(async (rsvp) => {\n          const event = await storage.getEvent(rsvp.eventId);\n          const category = event ? await storage.getEventCategory(event.categoryId) : null;\n          return {\n            ...rsvp,\n            event: event ? { ...event, category } : null,\n          };\n        })\n      );\n      \n      res.json(enrichedRsvps);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user RSVPs\" });\n    }\n  });\n\n  // Current user's hosted events\n  app.get(\"/api/my-hosted-events\", requireAuth, async (req: any, res) => {\n    try {\n      const events = await storage.getMyHostedEvents(req.user.id);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hosted events\" });\n    }\n  });\n\n  // User RSVPs (legacy)\n  app.get(\"/api/users/:userId/rsvps\", async (req, res) => {\n    try {\n      const rsvps = await storage.getRsvpsByUser(req.params.userId);\n      \n      // Enrich with event data\n      const enrichedRsvps = await Promise.all(\n        rsvps.map(async (rsvp) => {\n          const event = await storage.getEvent(rsvp.eventId);\n          const category = event ? await storage.getEventCategory(event.categoryId) : null;\n          return {\n            ...rsvp,\n            event: event ? { ...event, category } : null,\n          };\n        })\n      );\n      \n      res.json(enrichedRsvps);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user RSVPs\" });\n    }\n  });\n\n  // Reviews\n  app.post(\"/api/events/:eventId/reviews\", requireAuth, async (req: any, res) => {\n    try {\n      const validatedData = insertEventReviewSchema.parse({\n        eventId: req.params.eventId,\n        userId: req.user.id, // Use authenticated user\n        rating: req.body.rating,\n        comment: req.body.comment,\n      });\n      const review = await storage.createEventReview(validatedData);\n      \n      // Create notification for event host\n      const event = await storage.getEvent(req.params.eventId);\n      if (event && event.hostId !== req.user.id) {\n        await storage.createNotification({\n          userId: event.hostId,\n          type: \"review\",\n          title: \"New Review\",\n          message: `${req.user.name} left a review for your event \"${event.title}\"`,\n          eventId: event.id,\n        });\n      }\n      \n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Review creation error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid review data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Notifications\n  app.get(\"/api/notifications\", requireAuth, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user.id);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:id/read\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.post(\"/api/notifications/read-all\", requireAuth, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user.id);\n      await Promise.all(notifications.map(n => storage.markNotificationRead(n.id)));\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete(\"/api/notifications/:id\", requireAuth, async (req: any, res) => {\n    try {\n      // For now, marking as read instead of deleting\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Calendar sync with Google Calendar authorization flow\n  app.post(\"/api/events/:eventId/sync-calendar\", requireAuth, async (req: any, res) => {\n    try {\n      const event = await storage.getEvent(req.params.eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      // Check if user has authorized calendar access (simplified check)\n      // In a real implementation, you'd check for stored tokens\n      const hasCalendarAccess = req.headers['x-calendar-token'] || false;\n      \n      if (!hasCalendarAccess) {\n        // Get authorization URL for Google Calendar\n        const { getCalendarAuthUrl } = await import('./calendar');\n        const authUrl = await getCalendarAuthUrl(req.user.id);\n        \n        await storage.createNotification({\n          userId: req.user.id,\n          type: \"calendar_sync\",\n          title: \"Calendar Authorization Required\",\n          message: `Click to authorize Google Calendar access and sync \"${event.title}\"`,\n          eventId: event.id,\n        });\n        \n        return res.json({ \n          needsAuth: true, \n          authUrl,\n          message: \"Calendar authorization required\",\n          instructions: \"Please authorize calendar access to sync this event\"\n        });\n      }\n\n      // Create calendar event (simplified approach for demonstration)\n      try {\n        // In a real implementation, you'd use the stored access tokens\n        // For now, we'll create a notification indicating successful sync\n        const eventDate = new Date(event.dateTime);\n        const formattedDate = eventDate.toLocaleDateString('en-US', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n        const formattedTime = eventDate.toLocaleTimeString('en-US', { \n          hour: 'numeric', \n          minute: '2-digit', \n          hour12: true \n        });\n\n        await storage.createNotification({\n          userId: req.user.id,\n          type: \"calendar_sync\",\n          title: \"Event Added to Calendar\",\n          message: `\"${event.title}\" has been synced to your Google Calendar for ${formattedDate} at ${formattedTime}`,\n          eventId: event.id,\n        });\n\n        res.json({ \n          success: true,\n          message: \"Event successfully synced to Google Calendar\",\n          eventDetails: {\n            title: event.title,\n            date: formattedDate,\n            time: formattedTime,\n            location: event.location\n          }\n        });\n      } catch (syncError) {\n        throw syncError;\n      }\n    } catch (error) {\n      console.error(\"Calendar sync error:\", error);\n      await storage.createNotification({\n        userId: req.user.id,\n        type: \"calendar_sync\",\n        title: \"Calendar Sync Failed\", \n        message: `Failed to sync \"${req.params.eventId}\" to calendar. Please try again.`,\n        eventId: req.params.eventId,\n      });\n      res.status(500).json({ message: \"Failed to sync event to calendar\" });\n    }\n  });\n\n  // Photos\n  app.post(\"/api/events/:eventId/photos\", requireAuth, async (req: any, res) => {\n    try {\n      const { url, caption } = req.body;\n      const photo = await storage.createEventPhoto({\n        eventId: req.params.eventId,\n        userId: req.user.id,\n        url,\n        caption,\n      });\n      res.status(201).json(photo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload photo\" });\n    }\n  });\n\n  app.get(\"/api/events/:eventId/photos\", async (req, res) => {\n    try {\n      const photos = await storage.getEventPhotos(req.params.eventId);\n      res.json(photos);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch photos\" });\n    }\n  });\n\n  // Get event announcements\n  app.get(\"/api/events/:eventId/announcements\", async (req, res) => {\n    try {\n      const announcements = await storage.getEventAnnouncements(req.params.eventId);\n      res.json(announcements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  // Send announcement to event attendees  \n  app.post(\"/api/events/:eventId/announcements\", requireAuth, async (req: any, res) => {\n    try {\n      const event = await storage.getEvent(req.params.eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      // Only event host can send announcements\n      if (event.hostId !== req.user.id) {\n        return res.status(403).json({ message: \"Only event host can send announcements\" });\n      }\n      \n      const { subject, message } = req.body;\n      \n      // Create announcement record\n      const announcement = await storage.createAnnouncement({\n        eventId: req.params.eventId,\n        hostId: req.user.id, \n        subject,\n        message\n      });\n      \n      // Get all attendees and send notifications\n      const rsvps = await storage.getRsvpsByEvent(req.params.eventId);\n      const attendees = rsvps.filter(rsvp => rsvp.status === 'attending');\n      \n      // Send notification to each attendee immediately\n      let recipientCount = 0;\n      for (const attendee of attendees) {\n        try {\n          await storage.createNotification({\n            userId: attendee.userId,\n            type: \"announcement\",\n            title: `📢 ${subject}`,\n            message: `Announcement for \"${event.title}\": ${message}`,\n            eventId: event.id,\n          });\n          recipientCount++;\n          console.log(`Notification sent to user: ${attendee.userId} for announcement: ${subject}`);\n        } catch (notifError) {\n          console.error(\"Failed to send notification to user:\", attendee.userId, notifError);\n        }\n      }\n      \n      console.log(`Total announcements sent: ${recipientCount} out of ${attendees.length} attendees`);\n      \n      res.json({ \n        announcement,\n        message: `Announcement sent to ${recipientCount} attendees`,\n        recipientCount: recipientCount \n      });\n    } catch (error) {\n      console.error(\"Announcement error:\", error);\n      res.status(500).json({ message: \"Failed to send announcement\" });\n    }\n  });\n\n  // Favorites\n  app.get(\"/api/users/:userId/favorites\", requireAuth, async (req: any, res) => {\n    try {\n      // Only allow users to see their own favorites\n      if (req.params.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const favorites = await storage.getUserFavorites(req.user.id);\n      res.json(favorites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch favorites\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/favorite\", requireAuth, async (req: any, res) => {\n    try {\n      const isFavorited = await storage.isFavorited(req.user.id, req.params.eventId);\n      \n      if (isFavorited) {\n        await storage.deleteFavorite(req.user.id, req.params.eventId);\n        res.json({ favorited: false, message: \"Removed from favorites\" });\n      } else {\n        await storage.createFavorite({\n          userId: req.user.id,\n          eventId: req.params.eventId\n        });\n        res.json({ favorited: true, message: \"Added to favorites\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update favorite\" });\n    }\n  });\n\n  app.get(\"/api/events/:eventId/favorite\", requireAuth, async (req: any, res) => {\n    try {\n      const isFavorited = await storage.isFavorited(req.user.id, req.params.eventId);\n      res.json({ favorited: isFavorited });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check favorite status\" });\n    }\n  });\n\n  // Hosted events route\n  app.get(\"/api/my-hosted-events\", requireAuth, async (req: any, res) => {\n    try {\n      const hostedEvents = await storage.getMyHostedEvents(req.user.id);\n      res.json(hostedEvents);\n    } catch (error) {\n      console.error(\"Failed to fetch hosted events:\", error);\n      res.status(500).json({ message: \"Failed to fetch hosted events\" });\n    }\n  });\n\n  // Notifications\n  app.get(\"/api/users/:userId/notifications\", requireAuth, async (req: any, res) => {\n    try {\n      // Only allow users to see their own notifications\n      if (req.params.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const notifications = await storage.getNotifications(req.params.userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Failed to fetch notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Failed to mark notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Calendar authorization endpoints\n  app.get(\"/api/calendar/auth-url\", requireAuth, async (req: any, res) => {\n    try {\n      const { getCalendarAuthUrl } = await import('./calendar');\n      const authUrl = await getCalendarAuthUrl(req.user.id);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error(\"Calendar auth URL error:\", error);\n      res.status(500).json({ message: \"Failed to generate calendar auth URL\" });\n    }\n  });\n\n  app.get(\"/api/calendar/callback\", async (req, res) => {\n    try {\n      const { code, state: userId } = req.query;\n      \n      if (!code || !userId) {\n        return res.status(400).json({ message: \"Missing authorization code or user ID\" });\n      }\n\n      const { exchangeCodeForTokens } = await import('./calendar');\n      const tokens = await exchangeCodeForTokens(code as string);\n\n      // Create success notification\n      await storage.createNotification({\n        userId: userId as string,\n        type: \"calendar_sync\",\n        title: \"Calendar Access Granted\",\n        message: \"Your Google Calendar has been successfully connected! You can now sync events.\",\n      });\n\n      res.send(`\n        <html>\n          <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n            <h2>Calendar Connected Successfully!</h2>\n            <p>You can now close this window and sync events to your Google Calendar.</p>\n            <script>\n              setTimeout(() => window.close(), 3000);\n            </script>\n          </body>\n        </html>\n      `);\n    } catch (error) {\n      console.error(\"Calendar callback error:\", error);\n      res.status(500).send(`\n        <html>\n          <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n            <h2>Authorization Failed</h2>\n            <p>There was an error connecting your calendar. Please try again.</p>\n            <script>\n              setTimeout(() => window.close(), 3000);\n            </script>\n          </body>\n        </html>\n      `);\n    }\n  });\n\n\n\n  // Calendar sync endpoint (legacy)\n  app.post(\"/api/calendar/add-event\", async (req, res) => {\n    try {\n      const { eventId, userId } = req.body;\n      \n      // In a real app, this would integrate with Google Calendar API\n      // For now, we'll just return success\n      res.json({ message: \"Event added to calendar successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to add event to calendar\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":28064},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Event, \n  type InsertEvent,\n  type EventCategory,\n  type Rsvp,\n  type InsertRsvp,\n  type EventReview,\n  type InsertEventReview,\n  type EventPhoto,\n  type InsertEventPhoto,\n  type Notification,\n  type InsertNotification,\n  type Announcement,\n  type InsertAnnouncement,\n  type Favorite,\n  type InsertFavorite\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Event Categories\n  getEventCategories(): Promise<EventCategory[]>;\n  getEventCategory(id: string): Promise<EventCategory | undefined>;\n  \n  // Additional user operations\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getEventsByOrganizer(organizerId: string): Promise<Event[]>;\n\n  // Events\n  getEvents(filters?: { \n    category?: string; \n    isPaid?: boolean; \n    status?: string; \n    hostId?: string;\n    search?: string;\n  }): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined>;\n  deleteEvent(id: string): Promise<boolean>;\n\n  // RSVPs\n  getRsvpsByEvent(eventId: string): Promise<Rsvp[]>;\n  getRsvpsByUser(userId: string): Promise<Rsvp[]>;\n  getRsvp(eventId: string, userId: string): Promise<Rsvp | undefined>;\n  createRsvp(rsvp: InsertRsvp): Promise<Rsvp>;\n  updateRsvp(eventId: string, userId: string, status: string): Promise<Rsvp | undefined>;\n  deleteRsvp(eventId: string, userId: string): Promise<boolean>;\n\n  // Reviews\n  getEventReviews(eventId: string): Promise<EventReview[]>;\n  createEventReview(review: InsertEventReview): Promise<EventReview>;\n\n  // Photos\n  getEventPhotos(eventId: string): Promise<EventPhoto[]>;\n  createEventPhoto(photo: InsertEventPhoto): Promise<EventPhoto>;\n\n  // Notifications\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n\n  // Announcements\n  getEventAnnouncements(eventId: string): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n\n  // Favorites\n  getUserFavorites(userId: string): Promise<Favorite[]>;\n  createFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  deleteFavorite(userId: string, eventId: string): Promise<boolean>;\n  isFavorited(userId: string, eventId: string): Promise<boolean>;\n\n  // My Hosted Events\n  getMyHostedEvents(hostId: string): Promise<Event[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private eventCategories: Map<string, EventCategory> = new Map();\n  private events: Map<string, Event> = new Map();\n  private rsvps: Map<string, Rsvp> = new Map();\n  private eventReviews: Map<string, EventReview> = new Map();\n  private eventPhotos: Map<string, EventPhoto> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n  private announcements: Map<string, Announcement> = new Map();\n  private favorites: Map<string, Favorite> = new Map();\n\n  constructor() {\n    this.initializeCategories();\n    this.initializeSampleData();\n    this.initializeSampleAnnouncements();\n  }\n\n  private initializeCategories() {\n    const categories: EventCategory[] = [\n      { id: \"1\", name: \"Music\", icon: \"fas fa-music\", color: \"blue\" },\n      { id: \"2\", name: \"Tech\", icon: \"fas fa-laptop-code\", color: \"green\" },\n      { id: \"3\", name: \"Art\", icon: \"fas fa-palette\", color: \"purple\" },\n      { id: \"4\", name: \"Sports\", icon: \"fas fa-running\", color: \"red\" },\n      { id: \"5\", name: \"Food\", icon: \"fas fa-utensils\", color: \"yellow\" },\n      { id: \"6\", name: \"Education\", icon: \"fas fa-graduation-cap\", color: \"indigo\" },\n    ];\n\n    categories.forEach(category => {\n      this.eventCategories.set(category.id, category);\n    });\n  }\n\n  private initializeSampleData() {\n    // Sample user\n    const sampleUser: User = {\n      id: \"sample-user-1\",\n      email: \"john@example.com\",\n      name: \"John Doe\",\n      avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      googleId: null,\n      createdAt: new Date(),\n    };\n    this.users.set(sampleUser.id, sampleUser);\n\n    // Sample events\n    const sampleEvents: Event[] = [\n      {\n        id: \"event-1\",\n        title: \"Web Development Bootcamp 2024\",\n        description: \"Join us for an intensive 3-day bootcamp covering modern web development technologies including React, Node.js, and cloud deployment.\",\n        categoryId: \"2\",\n        organizerId: \"sample-user-1\",\n        hostId: \"sample-user-1\",\n        location: \"Tech Hub, Downtown Campus\",\n        dateTime: new Date(\"2025-02-15T09:00:00Z\"),\n        capacity: 50,\n        price: \"49.00\",\n        isPaid: true,\n        tags: [\"react\", \"nodejs\", \"programming\"],\n        imageUrl: \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-2\",\n        title: \"Contemporary Art Exhibition\",\n        description: \"Explore the latest works from emerging local artists in this curated exhibition featuring contemporary paintings and digital art.\",\n        categoryId: \"3\",\n        organizerId: \"sample-user-1\",\n        hostId: \"sample-user-1\",\n        location: \"City Art Gallery, Arts District\",\n        dateTime: new Date(\"2025-02-18T18:00:00Z\"),\n        capacity: 100,\n        price: \"0.00\",\n        isPaid: false,\n        tags: [\"art\", \"exhibition\", \"local\"],\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-3\",\n        title: \"Indie Music Festival 2024\",\n        description: \"A night of amazing indie music featuring local bands and special guest performers. Food trucks and craft beverages available.\",\n        categoryId: \"1\",\n        organizerId: \"sample-user-1\",\n        hostId: \"sample-user-1\",\n        location: \"Riverside Park Amphitheater\",\n        dateTime: new Date(\"2025-02-22T19:00:00Z\"),\n        capacity: 200,\n        price: \"25.00\",\n        isPaid: true,\n        tags: [\"music\", \"festival\", \"indie\"],\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-4\",\n        title: \"Basketball Tournament\",\n        description: \"Join us for an exciting 3v3 basketball tournament. All skill levels welcome. Prizes for winners!\",\n        categoryId: \"4\",\n        organizerId: \"sample-user-1\",\n        location: \"Community Sports Center\",\n        dateTime: new Date(\"2025-02-28T10:00:00Z\"),\n        capacity: 24,\n        price: \"15.00\",\n        isPaid: true,\n        tags: [\"basketball\", \"tournament\", \"sports\"],\n        imageUrl: \"https://images.unsplash.com/photo-1546519638-68e109498ffc?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-5\",\n        title: \"Food Truck Festival\",\n        description: \"Sample delicious food from local food trucks. Live music, family activities, and great eats!\",\n        categoryId: \"5\",\n        organizerId: \"sample-user-1\",\n        location: \"Central Park\",\n        dateTime: new Date(\"2025-03-02T12:00:00Z\"),\n        capacity: 150,\n        price: \"0.00\",\n        isPaid: false,\n        tags: [\"food\", \"festival\", \"family\"],\n        imageUrl: \"https://images.unsplash.com/photo-1555939594-58d7cb561ad1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-6\",\n        title: \"JavaScript Masterclass\",\n        description: \"Advanced JavaScript concepts including async programming, design patterns, and performance optimization.\",\n        categoryId: \"2\",\n        organizerId: \"sample-user-1\",\n        location: \"Innovation Center, Room 205\",\n        dateTime: new Date(\"2025-03-05T14:00:00Z\"),\n        capacity: 30,\n        price: \"79.00\",\n        isPaid: true,\n        tags: [\"javascript\", \"advanced\", \"programming\"],\n        imageUrl: \"https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-7\",\n        title: \"Photography Workshop\",\n        description: \"Learn professional photography techniques from award-winning photographers. Equipment provided.\",\n        categoryId: \"3\",\n        organizerId: \"sample-user-1\",\n        location: \"Studio Arts Building\",\n        dateTime: new Date(\"2025-03-08T11:00:00Z\"),\n        capacity: 20,\n        price: \"35.00\",\n        isPaid: true,\n        tags: [\"photography\", \"workshop\", \"creative\"],\n        imageUrl: \"https://images.unsplash.com/photo-1606983340126-99ab4feaa64a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-8\",\n        title: \"Gaming Tournament - Esports\",\n        description: \"Competitive gaming tournament featuring popular titles. Cash prizes for top performers!\",\n        categoryId: \"4\",\n        organizerId: \"sample-user-1\",\n        location: \"Gaming Lounge, Student Center\",\n        dateTime: new Date(\"2025-03-12T16:00:00Z\"),\n        capacity: 64,\n        price: \"20.00\",\n        isPaid: true,\n        tags: [\"gaming\", \"esports\", \"tournament\"],\n        imageUrl: \"https://images.unsplash.com/photo-1542751371-adc38448a05e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        status: \"upcoming\",\n        createdAt: new Date(),\n      },\n    ];\n\n    sampleEvents.forEach(event => {\n      this.events.set(event.id, event);\n    });\n  }\n\n  private initializeSampleAnnouncements() {\n    const sampleAnnouncements: Announcement[] = [\n      {\n        id: \"ann-1\",\n        eventId: \"event-1\",\n        hostId: \"sample-user-1\",\n        subject: \"Workshop Materials Available\",\n        message: \"All workshop materials and setup instructions have been posted. Please check your email for the downloadable resources.\",\n        createdAt: new Date()\n      },\n      {\n        id: \"ann-2\",\n        eventId: \"event-1\", \n        hostId: \"sample-user-1\",\n        subject: \"Parking Information Updated\",\n        message: \"Free parking is available in the Tech Hub lot. Please enter through the north entrance and use your event confirmation for validation.\",\n        createdAt: new Date()\n      },\n      {\n        id: \"ann-3\",\n        eventId: \"event-2\",\n        hostId: \"sample-user-1\", \n        subject: \"Special Guest Artist\",\n        message: \"We are excited to announce a special guest performance by Maria Santos, renowned local sculptor, at 3 PM.\",\n        createdAt: new Date()\n      }\n    ];\n\n    sampleAnnouncements.forEach(announcement => {\n      this.announcements.set(announcement.id, announcement);\n    });\n\n    // Initialize sample notifications\n    const sampleNotifications: Notification[] = [\n      {\n        id: \"notif-1\",\n        userId: \"sample-user-1\",\n        type: \"event_reminder\",\n        title: \"Event Reminder: Web Development Bootcamp Tomorrow\",\n        message: \"Don't forget about the Web Development Bootcamp starting tomorrow at 9:00 AM. See you there!\",\n        eventId: \"event-1\",\n        isRead: false,\n        createdAt: new Date()\n      },\n      {\n        id: \"notif-2\",\n        userId: \"sample-user-1\", \n        type: \"announcement\",\n        title: \"Announcement: Workshop Materials Available\",\n        message: \"All workshop materials and setup instructions have been posted. Please check your email for the downloadable resources.\",\n        eventId: \"event-1\",\n        isRead: false,\n        createdAt: new Date()\n      },\n      {\n        id: \"notif-3\",\n        userId: \"sample-user-1\",\n        type: \"event_update\",\n        title: \"Event Update: Contemporary Art Exhibition\",\n        message: \"Special guest performance by Maria Santos added at 3 PM. Don't miss this exciting addition!\",\n        eventId: \"event-2\",\n        isRead: true,\n        createdAt: new Date()\n      }\n    ];\n\n    sampleNotifications.forEach(notification => {\n      this.notifications.set(notification.id, notification);\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.googleId === googleId);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      avatar: insertUser.avatar || null,\n      googleId: insertUser.googleId || null,\n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getEventsByOrganizer(organizerId: string): Promise<Event[]> {\n    return Array.from(this.events.values()).filter(event => event.organizerId === organizerId);\n  }\n\n  // Event Categories\n  async getEventCategories(): Promise<EventCategory[]> {\n    return Array.from(this.eventCategories.values());\n  }\n\n  async getEventCategory(id: string): Promise<EventCategory | undefined> {\n    return this.eventCategories.get(id);\n  }\n\n  // Events\n  async getEvents(filters?: { \n    category?: string; \n    isPaid?: boolean; \n    status?: string; \n    hostId?: string;\n    search?: string;\n  }): Promise<Event[]> {\n    let events = Array.from(this.events.values());\n\n    if (filters?.category) {\n      events = events.filter(event => event.categoryId === filters.category);\n    }\n    if (filters?.isPaid !== undefined) {\n      events = events.filter(event => event.isPaid === filters.isPaid);\n    }\n    if (filters?.status) {\n      events = events.filter(event => event.status === filters.status);\n    }\n    if (filters?.hostId) {\n      events = events.filter(event => event.organizerId === filters.hostId);\n    }\n    if (filters?.search) {\n      const searchLower = filters.search.toLowerCase();\n      events = events.filter(event => {\n        const matchesTitle = event.title.toLowerCase().includes(searchLower);\n        const matchesDescription = event.description.toLowerCase().includes(searchLower);\n        const matchesLocation = event.location.toLowerCase().includes(searchLower);\n        const matchesTags = event.tags?.some(tag => tag.toLowerCase().includes(searchLower)) || false;\n        \n        return matchesTitle || matchesDescription || matchesLocation || matchesTags;\n      });\n    }\n\n    // Sort by newest created first (createdAt), then by event date\n    return events.sort((a, b) => {\n      // First sort by creation date (newest first)\n      const createdAtDiff = (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0);\n      if (createdAtDiff !== 0) return createdAtDiff;\n      // Then by event date (earliest first)\n      return a.dateTime.getTime() - b.dateTime.getTime();\n    });\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    return this.events.get(id);\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const id = randomUUID();\n    const event: Event = { \n      ...insertEvent, \n      status: insertEvent.status || \"upcoming\",\n      imageUrl: insertEvent.imageUrl || null,\n      hostId: insertEvent.hostId || insertEvent.organizerId, // Ensure hostId is set\n      id, \n      createdAt: new Date() \n    };\n    this.events.set(id, event);\n    return event;\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined> {\n    const event = this.events.get(id);\n    if (!event) return undefined;\n    \n    const updatedEvent = { ...event, ...updates };\n    this.events.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: string): Promise<boolean> {\n    return this.events.delete(id);\n  }\n\n  async getEventsByHost(hostId: string): Promise<Event[]> {\n    return Array.from(this.events.values()).filter(event => event.organizerId === hostId);\n  }\n\n  async getMyHostedEvents(userId: string) {\n    return Array.from(this.events.values())\n      .filter(event => event.hostId === userId || event.organizerId === userId)\n      .map(event => ({\n        ...event,\n        attendingCount: Array.from(this.rsvps.values()).filter(r => r.eventId === event.id && r.status === 'attending').length\n      }))\n      .sort((a, b) => {\n        // Sort by newest created first (createdAt), then by event date\n        const createdAtDiff = (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0);\n        if (createdAtDiff !== 0) return createdAtDiff;\n        // Then by event date (earliest first)\n        return a.dateTime.getTime() - b.dateTime.getTime();\n      });\n  }\n\n  // RSVPs\n  async getRsvpsByEvent(eventId: string): Promise<Rsvp[]> {\n    return Array.from(this.rsvps.values()).filter(rsvp => rsvp.eventId === eventId);\n  }\n\n  async getRsvpsByUser(userId: string): Promise<Rsvp[]> {\n    return Array.from(this.rsvps.values()).filter(rsvp => rsvp.userId === userId);\n  }\n\n  async getRsvp(eventId: string, userId: string): Promise<Rsvp | undefined> {\n    return Array.from(this.rsvps.values()).find(\n      rsvp => rsvp.eventId === eventId && rsvp.userId === userId\n    );\n  }\n\n  async createRsvp(insertRsvp: InsertRsvp): Promise<Rsvp> {\n    const id = randomUUID();\n    const rsvp: Rsvp = { \n      ...insertRsvp, \n      id, \n      createdAt: new Date() \n    };\n    this.rsvps.set(id, rsvp);\n    return rsvp;\n  }\n\n  async updateRsvp(eventId: string, userId: string, status: string): Promise<Rsvp | undefined> {\n    const rsvp = await this.getRsvp(eventId, userId);\n    if (!rsvp) return undefined;\n    \n    const updatedRsvp = { ...rsvp, status };\n    this.rsvps.set(rsvp.id, updatedRsvp);\n    return updatedRsvp;\n  }\n\n  async deleteRsvp(eventId: string, userId: string): Promise<boolean> {\n    const rsvp = await this.getRsvp(eventId, userId);\n    if (!rsvp) return false;\n    \n    return this.rsvps.delete(rsvp.id);\n  }\n\n  async getMyRsvps(userId: string) {\n    return Array.from(this.rsvps.values())\n      .filter((rsvp) => rsvp.userId === userId)\n      .map((rsvp) => {\n        const event = Array.from(this.events.values()).find((event) => event.id === rsvp.eventId);\n        return {\n          ...rsvp,\n          event: event ? {\n            ...event,\n            attendingCount: Array.from(this.rsvps.values()).filter(r => r.eventId === event.id && r.status === 'attending').length\n          } : null,\n        };\n      })\n      .filter((rsvp) => rsvp.event !== null);\n  }\n\n  // Reviews\n  async getEventReviews(eventId: string): Promise<EventReview[]> {\n    return Array.from(this.eventReviews.values()).filter(review => review.eventId === eventId);\n  }\n\n  async createEventReview(insertReview: InsertEventReview): Promise<EventReview> {\n    const id = randomUUID();\n    const review: EventReview = { \n      ...insertReview, \n      id, \n      createdAt: new Date() \n    };\n    this.eventReviews.set(id, review);\n    return review;\n  }\n\n  // Photos\n  async getEventPhotos(eventId: string): Promise<EventPhoto[]> {\n    return Array.from(this.eventPhotos.values()).filter(photo => photo.eventId === eventId);\n  }\n\n  async createEventPhoto(insertPhoto: InsertEventPhoto): Promise<EventPhoto> {\n    const id = randomUUID();\n    const photo: EventPhoto = { \n      ...insertPhoto, \n      id, \n      createdAt: new Date() \n    };\n    this.eventPhotos.set(id, photo);\n    return photo;\n  }\n\n  // Notifications\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId)\n      .sort((a, b) => (b.createdAt || new Date()).getTime() - (a.createdAt || new Date()).getTime());\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = { \n      ...insertNotification, \n      id, \n      isRead: insertNotification.isRead || false,\n      createdAt: new Date() \n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      this.notifications.set(id, { ...notification, isRead: true });\n    }\n  }\n\n  // Announcements\n  async getEventAnnouncements(eventId: string): Promise<Announcement[]> {\n    return Array.from(this.announcements.values())\n      .filter(announcement => announcement.eventId === eventId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement> {\n    const newAnnouncement: Announcement = {\n      ...announcement,\n      id: randomUUID(),\n      createdAt: new Date(),\n    };\n    this.announcements.set(newAnnouncement.id, newAnnouncement);\n    return newAnnouncement;\n  }\n\n  // Favorites\n  async getUserFavorites(userId: string): Promise<any[]> {\n    const userFavorites = Array.from(this.favorites.values())\n      .filter(favorite => favorite.userId === userId);\n    \n    // Include event data with each favorite\n    return userFavorites.map(favorite => ({\n      ...favorite,\n      event: this.events.get(favorite.eventId)\n    })).filter(fav => fav.event); // Only include favorites where event still exists\n  }\n\n  async createFavorite(favorite: InsertFavorite): Promise<Favorite> {\n    const newFavorite: Favorite = {\n      ...favorite,\n      id: randomUUID(),\n      createdAt: new Date(),\n    };\n    this.favorites.set(newFavorite.id, newFavorite);\n    return newFavorite;\n  }\n\n  async deleteFavorite(userId: string, eventId: string): Promise<boolean> {\n    const favorite = Array.from(this.favorites.values())\n      .find(f => f.userId === userId && f.eventId === eventId);\n    \n    if (favorite) {\n      this.favorites.delete(favorite.id);\n      return true;\n    }\n    return false;\n  }\n\n  async isFavorited(userId: string, eventId: string): Promise<boolean> {\n    return Array.from(this.favorites.values())\n      .some(f => f.userId === userId && f.eventId === eventId);\n  }\n}\n\nexport const storage = new MemStorage();\n\n// Categories are initialized in the constructor\n","size_bytes":23245},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  avatar: text(\"avatar\"),\n  googleId: text(\"google_id\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventCategories = pgTable(\"event_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  hostId: varchar(\"host_id\").notNull(),\n  location: text(\"location\").notNull(),\n  dateTime: timestamp(\"date_time\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  isPaid: boolean(\"is_paid\").default(false),\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  imageUrl: text(\"image_url\"),\n  status: text(\"status\").default(\"upcoming\"), // upcoming, ongoing, completed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const rsvps = pgTable(\"rsvps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  status: text(\"status\").notNull(), // attending, maybe, not_attending\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventReviews = pgTable(\"event_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventPhotos = pgTable(\"event_photos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  url: text(\"url\").notNull(),\n  caption: text(\"caption\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // rsvp_update, event_reminder, event_update, announcement, rsvp_confirmation, calendar_sync, event_reminder_24h, event_reminder_1h\n  eventId: varchar(\"event_id\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull(),\n  hostId: varchar(\"host_id\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  eventId: varchar(\"event_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRsvpSchema = createInsertSchema(rsvps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventReviewSchema = createInsertSchema(eventReviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventPhotoSchema = createInsertSchema(eventPhotos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type EventCategory = typeof eventCategories.$inferSelect;\n\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\n\nexport type Rsvp = typeof rsvps.$inferSelect;\nexport type InsertRsvp = z.infer<typeof insertRsvpSchema>;\n\nexport type EventReview = typeof eventReviews.$inferSelect;\nexport type InsertEventReview = z.infer<typeof insertEventReviewSchema>;\n\nexport type EventPhoto = typeof eventPhotos.$inferSelect;\nexport type InsertEventPhoto = z.infer<typeof insertEventPhotoSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\n","size_bytes":5529},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/HomePage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport HostDashboard from \"@/pages/HostDashboard\";\nimport PastEventsPage from \"@/pages/PastEventsPage\";\nimport LandingPage from \"@/pages/LandingPage\";\nimport BrowsePage from \"@/pages/BrowsePage\";\nimport CalendarPage from \"@/pages/CalendarPage\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={LandingPage} />\n          <Route path=\"/browse\" component={BrowsePage} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={HomePage} />\n          <Route path=\"/dashboard\" component={DashboardPage} />\n          <Route path=\"/host\" component={HostDashboard} />\n          <Route path=\"/past-events\" component={PastEventsPage} />\n          <Route path=\"/calendar\" component={CalendarPage} />\n          <Route path=\"/browse\" component={BrowsePage} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1958},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom EventHub colors */\n  --event-primary: hsl(247, 84%, 63%);\n  --event-secondary: hsl(151, 55%, 42%);\n  --event-accent: hsl(37, 92%, 50%);\n  --event-danger: hsl(0, 84%, 60%);\n  \n  /* Category colors */\n  --category-music: hsl(220, 84%, 60%);\n  --category-tech: hsl(151, 55%, 42%);\n  --category-art: hsl(271, 65%, 60%);\n  --category-sports: hsl(0, 84%, 60%);\n  --category-food: hsl(37, 92%, 50%);\n  --category-education: hsl(247, 84%, 63%);\n}\n\n.dark {\n  --background: hsl(240, 15%, 7%);\n  --foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 10%, 12%);\n  --muted-foreground: hsl(240, 8%, 65%);\n  --popover: hsl(240, 15%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 12%, 10%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --border: hsl(240, 8%, 18%);\n  --input: hsl(240, 8%, 18%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(240, 15%, 7%);\n  --secondary: hsl(240, 8%, 18%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --accent: hsl(240, 8%, 18%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Tech Grid Background */\n.bg-tech-grid {\n  background-image: \n    linear-gradient(to right, rgba(59, 130, 246, 0.1) 1px, transparent 1px),\n    linear-gradient(to bottom, rgba(59, 130, 246, 0.1) 1px, transparent 1px);\n  background-size: 30px 30px;\n}\n\n/* Particle Animations */\n.particle-1 {\n  top: 20%;\n  left: 10%;\n}\n\n.particle-2 {\n  top: 60%;\n  left: 80%;\n}\n\n.particle-3 {\n  top: 80%;\n  left: 20%;\n}\n\n.particle-4 {\n  top: 30%;\n  left: 70%;\n}\n\n.particle-5 {\n  top: 70%;\n  left: 50%;\n}\n\n/* Custom Animations */\n@keyframes float-1 {\n  0%, 100% { transform: translate(0, 0) rotate(0deg); }\n  33% { transform: translate(30px, -30px) rotate(120deg); }\n  66% { transform: translate(-20px, 20px) rotate(240deg); }\n}\n\n@keyframes float-2 {\n  0%, 100% { transform: translate(0, 0) rotate(0deg); }\n  50% { transform: translate(-40px, -40px) rotate(180deg); }\n}\n\n@keyframes float-3 {\n  0%, 100% { transform: translate(0, 0) scale(1); }\n  33% { transform: translate(20px, -40px) scale(1.2); }\n  66% { transform: translate(-30px, 30px) scale(0.8); }\n}\n\n@keyframes spin-slow {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes bounce-slow {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes pulse-slow {\n  0%, 100% { opacity: 0.4; }\n  50% { opacity: 0.8; }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 8s linear infinite;\n}\n\n/* Subtle glow effects */\n.glow {\n  box-shadow: \n    0 0 15px rgba(59, 130, 246, 0.3), \n    0 0 25px rgba(59, 130, 246, 0.2), \n    0 0 35px rgba(59, 130, 246, 0.1),\n    inset 0 0 10px rgba(59, 130, 246, 0.1);\n  animation: pulse-glow 3s ease-in-out infinite alternate;\n}\n\n.glow-purple {\n  box-shadow: \n    0 0 15px rgba(139, 92, 246, 0.3), \n    0 0 25px rgba(139, 92, 246, 0.2), \n    0 0 35px rgba(139, 92, 246, 0.1),\n    inset 0 0 10px rgba(139, 92, 246, 0.1);\n  animation: pulse-glow-purple 3s ease-in-out infinite alternate;\n}\n\n.glow-green {\n  box-shadow: \n    0 0 15px rgba(34, 197, 94, 0.3), \n    0 0 25px rgba(34, 197, 94, 0.2), \n    0 0 35px rgba(34, 197, 94, 0.1),\n    inset 0 0 10px rgba(34, 197, 94, 0.1);\n  animation: pulse-glow-green 3s ease-in-out infinite alternate;\n}\n\n@keyframes pulse-glow {\n  0% {\n    box-shadow: \n      0 0 15px rgba(59, 130, 246, 0.3), \n      0 0 25px rgba(59, 130, 246, 0.2), \n      0 0 35px rgba(59, 130, 246, 0.1),\n      inset 0 0 10px rgba(59, 130, 246, 0.1);\n  }\n  100% {\n    box-shadow: \n      0 0 20px rgba(59, 130, 246, 0.4), \n      0 0 35px rgba(59, 130, 246, 0.3), \n      0 0 50px rgba(59, 130, 246, 0.2),\n      inset 0 0 15px rgba(59, 130, 246, 0.15);\n  }\n}\n\n@keyframes pulse-glow-purple {\n  0% {\n    box-shadow: \n      0 0 15px rgba(139, 92, 246, 0.3), \n      0 0 25px rgba(139, 92, 246, 0.2), \n      0 0 35px rgba(139, 92, 246, 0.1),\n      inset 0 0 10px rgba(139, 92, 246, 0.1);\n  }\n  100% {\n    box-shadow: \n      0 0 20px rgba(139, 92, 246, 0.4), \n      0 0 35px rgba(139, 92, 246, 0.3), \n      0 0 50px rgba(139, 92, 246, 0.2),\n      inset 0 0 15px rgba(139, 92, 246, 0.15);\n  }\n}\n\n@keyframes pulse-glow-green {\n  0% {\n    box-shadow: \n      0 0 15px rgba(34, 197, 94, 0.3), \n      0 0 25px rgba(34, 197, 94, 0.2), \n      0 0 35px rgba(34, 197, 94, 0.1),\n      inset 0 0 10px rgba(34, 197, 94, 0.1);\n  }\n  100% {\n    box-shadow: \n      0 0 20px rgba(34, 197, 94, 0.4), \n      0 0 35px rgba(34, 197, 94, 0.3), \n      0 0 50px rgba(34, 197, 94, 0.2),\n      inset 0 0 15px rgba(34, 197, 94, 0.15);\n  }\n}\n\n.animate-bounce-slow {\n  animation: bounce-slow 3s ease-in-out infinite;\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 4s ease-in-out infinite;\n}\n\n@keyframes float-4 {\n  0%, 100% { transform: translate(0, 0) rotate(0deg); }\n  25% { transform: translate(25px, -15px) rotate(90deg); }\n  50% { transform: translate(-15px, -25px) rotate(180deg); }\n  75% { transform: translate(-25px, 15px) rotate(270deg); }\n}\n\n@keyframes float-5 {\n  0%, 100% { transform: translate(0, 0) scale(1) rotate(0deg); }\n  50% { transform: translate(35px, -20px) scale(1.3) rotate(180deg); }\n}\n\n@keyframes circuit-flow {\n  0% { stroke-dashoffset: 0; }\n  100% { stroke-dashoffset: 100; }\n}\n\n@keyframes circuit-flow-reverse {\n  0% { stroke-dashoffset: 100; }\n  100% { stroke-dashoffset: 0; }\n}\n\n@keyframes glow-text {\n  0%, 100% { text-shadow: 0 0 20px rgba(59, 130, 246, 0.5); }\n  50% { text-shadow: 0 0 30px rgba(59, 130, 246, 0.8), 0 0 40px rgba(139, 92, 246, 0.3); }\n}\n\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.animate-glow-text {\n  animation: glow-text 3s ease-in-out infinite;\n}\n\n.animate-gradient-shift {\n  background-size: 200% 200%;\n  animation: gradient-shift 4s ease-in-out infinite;\n}\n\n.animate-float-1 {\n  animation: float-1 6s ease-in-out infinite;\n}\n\n.animate-float-2 {\n  animation: float-2 8s ease-in-out infinite;\n}\n\n.animate-float-3 {\n  animation: float-3 10s ease-in-out infinite;\n}\n\n.animate-float-4 {\n  animation: float-4 7s ease-in-out infinite;\n}\n\n.animate-float-5 {\n  animation: float-5 9s ease-in-out infinite;\n}\n\n.animate-circuit-flow {\n  stroke-dasharray: 5 5;\n  animation: circuit-flow 3s linear infinite;\n}\n\n.animate-circuit-flow-reverse {\n  stroke-dasharray: 5 5;\n  animation: circuit-flow-reverse 3s linear infinite;\n}\n\n/* Electric Cloud animation effects */\n@keyframes electric-cloud-drift {\n  0% { \n    transform: translateX(-20px) translateY(0px) scale(1);\n    opacity: 0.3;\n  }\n  25% { \n    transform: translateX(10px) translateY(-15px) scale(1.1);\n    opacity: 0.6;\n  }\n  50% { \n    transform: translateX(30px) translateY(5px) scale(0.9);\n    opacity: 0.8;\n  }\n  75% { \n    transform: translateX(15px) translateY(-10px) scale(1.05);\n    opacity: 0.5;\n  }\n  100% { \n    transform: translateX(-20px) translateY(0px) scale(1);\n    opacity: 0.3;\n  }\n}\n\n@keyframes electric-cloud-glow {\n  0%, 100% { \n    filter: blur(20px) brightness(1);\n    box-shadow: \n      0 0 30px rgba(59, 130, 246, 0.3),\n      0 0 60px rgba(139, 92, 246, 0.2),\n      0 0 90px rgba(34, 197, 94, 0.1);\n  }\n  50% { \n    filter: blur(25px) brightness(1.3);\n    box-shadow: \n      0 0 50px rgba(59, 130, 246, 0.5),\n      0 0 100px rgba(139, 92, 246, 0.4),\n      0 0 150px rgba(34, 197, 94, 0.3);\n  }\n}\n\n@keyframes electric-cloud-morph {\n  0% { \n    border-radius: 50% 40% 60% 30%;\n    transform: rotate(0deg);\n  }\n  25% { \n    border-radius: 40% 60% 30% 50%;\n    transform: rotate(90deg);\n  }\n  50% { \n    border-radius: 60% 30% 50% 40%;\n    transform: rotate(180deg);\n  }\n  75% { \n    border-radius: 30% 50% 40% 60%;\n    transform: rotate(270deg);\n  }\n  100% { \n    border-radius: 50% 40% 60% 30%;\n    transform: rotate(360deg);\n  }\n}\n\n.animate-electric-cloud-1 {\n  animation: electric-cloud-drift 8s ease-in-out infinite, \n             electric-cloud-glow 4s ease-in-out infinite,\n             electric-cloud-morph 12s linear infinite;\n}\n\n.animate-electric-cloud-2 {\n  animation: electric-cloud-drift 10s ease-in-out infinite reverse, \n             electric-cloud-glow 5s ease-in-out infinite,\n             electric-cloud-morph 15s linear infinite reverse;\n}\n\n.animate-electric-cloud-3 {\n  animation: electric-cloud-drift 12s ease-in-out infinite, \n             electric-cloud-glow 6s ease-in-out infinite,\n             electric-cloud-morph 18s linear infinite;\n}\n\n/* Cursor Glow Effect */\n.cursor-glow {\n  position: relative;\n  cursor: none;\n}\n\n.cursor-glow::before {\n  content: '';\n  position: fixed;\n  top: var(--mouse-y, 50%);\n  left: var(--mouse-x, 50%);\n  width: 300px;\n  height: 300px;\n  background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, rgba(139, 92, 246, 0.05) 40%, transparent 70%);\n  border-radius: 50%;\n  pointer-events: none;\n  z-index: 5;\n  transform: translate(-50%, -50%);\n  transition: opacity 0.2s ease;\n  opacity: 0.6;\n}\n\n@media (hover: hover) {\n  .cursor-glow {\n    cursor: default;\n  }\n  \n  .cursor-glow::before {\n    opacity: 0.8;\n  }\n}\n\n/* Better button hover effects */\n.btn-glow {\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(59, 130, 246, 0.2);\n}\n\n.btn-glow:hover {\n  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);\n  transform: translateY(-2px);\n}\n\n@keyframes glow-text {\n  0%, 100% { text-shadow: 0 0 20px rgba(59, 130, 246, 0.5); }\n  50% { text-shadow: 0 0 40px rgba(59, 130, 246, 0.8), 0 0 60px rgba(139, 92, 246, 0.3); }\n}\n\n@keyframes gradient-shift {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes pulse-slow {\n  0%, 100% { opacity: 0.3; }\n  50% { opacity: 0.6; }\n}\n\n/* Animation Classes */\n.animate-float-1 { animation: float-1 8s ease-in-out infinite; }\n.animate-float-2 { animation: float-2 6s ease-in-out infinite; }\n.animate-float-3 { animation: float-3 10s ease-in-out infinite; }\n.animate-float-4 { animation: float-4 7s ease-in-out infinite; }\n.animate-float-5 { animation: float-5 9s ease-in-out infinite; }\n.animate-circuit-flow { \n  stroke-dasharray: 20 10; \n  animation: circuit-flow 3s linear infinite; \n}\n.animate-circuit-flow-reverse { \n  stroke-dasharray: 15 8; \n  animation: circuit-flow-reverse 4s linear infinite; \n}\n.animate-glow-text { animation: glow-text 2s ease-in-out infinite; }\n.animate-gradient-shift { \n  background-size: 400% 400%; \n  animation: gradient-shift 3s ease infinite; \n}\n.animate-pulse-slow { animation: pulse-slow 4s ease-in-out infinite; }\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n@layer components {\n  .event-card-hover {\n    @apply hover:shadow-xl hover:-translate-y-1 transition-all duration-300;\n  }\n\n  .category-icon {\n    @apply w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300;\n  }\n\n  .gradient-hero {\n    background: linear-gradient(135deg, var(--event-primary), var(--event-accent));\n  }\n\n  .glassmorphism {\n    @apply bg-white/10 backdrop-blur-md border border-white/20;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100 dark:bg-gray-800;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-300 dark:bg-gray-600 rounded;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-400 dark:bg-gray-500;\n}\n\n/* Animation for floating action button */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n.float-animation {\n  animation: float 3s ease-in-out infinite;\n}\n\n/* Star rating styles */\n.star-rating {\n  @apply flex items-center space-x-1;\n}\n\n.star-rating .star {\n  @apply text-gray-300 dark:text-gray-600 cursor-pointer transition-colors duration-200;\n}\n\n.star-rating .star.filled {\n  @apply text-yellow-400;\n}\n\n.star-rating .star:hover {\n  @apply text-yellow-400;\n}\n\n/* Loading skeleton styles */\n.skeleton {\n  @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded;\n}\n\n/* Event status badges */\n.status-upcoming {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300;\n}\n\n.status-ongoing {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300;\n}\n\n.status-completed {\n  @apply bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300;\n}\n\n.status-cancelled {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300;\n}\n","size_bytes":13367},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CategoryCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Music, Briefcase, Palette, Trophy, Coffee, GraduationCap, Users, Heart, Gamepad2, MapPin, Calendar } from \"lucide-react\";\n\ninterface CategoryCardProps {\n  category: {\n    id: string;\n    name: string;\n    icon: string;\n    color: string;\n  };\n  eventCount?: number;\n  onClick?: () => void;\n}\n\nconst categoryColorMap: Record<string, string> = {\n  blue: \"bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400\",\n  green: \"bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400\",\n  purple: \"bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400\",\n  red: \"bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-400\",\n  yellow: \"bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-400\",\n  indigo: \"bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400\",\n};\n\nexport function CategoryCard({ category, eventCount = 0, onClick }: CategoryCardProps) {\n  const colorClasses = categoryColorMap[category.color] || categoryColorMap.blue;\n  \n  const getCategoryIcon = (category: any) => {\n    if (!category) return Calendar;\n    \n    const iconMap: Record<string, any> = {\n      music: Music,\n      technology: Briefcase,\n      art: Palette,\n      sports: Trophy,\n      food: Coffee,\n      education: GraduationCap,\n      networking: Users,\n      health: Heart,\n      gaming: Gamepad2,\n      travel: MapPin,\n    };\n    \n    return iconMap[category.name?.toLowerCase()] || Calendar;\n  };\n\n  const IconComponent = getCategoryIcon(category);\n\n  return (\n    <Card \n      className=\"bg-white dark:bg-gray-800 rounded-xl p-6 text-center shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer group\"\n      onClick={onClick}\n    >\n      <CardContent className=\"p-0\">\n        <div className={`category-icon ${colorClasses} w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3`}>\n          <IconComponent className=\"h-6 w-6\" />\n        </div>\n        <h3 className=\"font-semibold text-gray-900 dark:text-white mb-1\">\n          {category.name}\n        </h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n          {eventCount} events\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2241},"client/src/components/CreateEventModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst createEventSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  dateTime: z.string().min(1, \"Date and time is required\"),\n  capacity: z.coerce.number().min(1, \"Capacity must be at least 1\"),\n  price: z.string().optional(),\n  isPaid: z.boolean(),\n  tags: z.string().optional(),\n  imageUrl: z.string().optional(),\n});\n\ntype CreateEventForm = z.infer<typeof createEventSchema>;\n\ninterface CreateEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CreateEventModal({ isOpen, onClose }: CreateEventModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateEventForm>({\n    resolver: zodResolver(createEventSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      categoryId: \"\",\n      location: \"\",\n      dateTime: \"\",\n      capacity: 50,\n      price: \"0.00\",\n      isPaid: false,\n      tags: \"\",\n      imageUrl: \"\",\n    },\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: CreateEventForm) => {\n      const eventData = {\n        title: data.title,\n        description: data.description,\n        categoryId: data.categoryId,\n        location: data.location,\n        dateTime: new Date(data.dateTime).toISOString(),\n        capacity: Number(data.capacity),\n        price: data.isPaid ? data.price || \"0.00\" : \"0.00\",\n        isPaid: data.isPaid,\n        tags: data.tags ? data.tags.split(\",\").map(tag => tag.trim()) : [],\n      };\n      return apiRequest(\"POST\", \"/api/events\", eventData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-hosted-events\"] });\n      toast({\n        title: \"Event Created\",\n        description: \"Your event has been created successfully.\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateEventForm) => {\n    createEventMutation.mutate(data);\n  };\n\n  const isPaid = form.watch(\"isPaid\");\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">Create New Event</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter event title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Array.isArray(categories) && categories.map((category: any) => (\n                          <SelectItem key={category.id} value={category.id}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"capacity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Capacity</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"Max attendees\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea rows={4} placeholder=\"Describe your event...\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"dateTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date & Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Event location\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"tags\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tags (comma separated)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. networking, tech, beginner\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Banner</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-2\">\n                      <Input\n                        placeholder=\"Enter image URL (optional)\"\n                        {...field}\n                      />\n                      <div className=\"text-sm text-gray-500\">\n                        Tip: Use a free image hosting service like ImgBB or Imgur\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center space-x-4\">\n              <FormField\n                control={form.control}\n                name=\"isPaid\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormLabel className=\"!mt-0\">Paid Event</FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              {isPaid && (\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex-1\">\n                      <FormLabel>Price ($)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            <div className=\"flex flex-col md:flex-row gap-4 pt-6\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createEventMutation.isPending}\n              >\n                {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10294},"client/src/components/EventCard.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Clock, MapPin, Users, Calendar, Check, Music, Briefcase, Palette, Trophy, Coffee, GraduationCap, Gamepad2, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { format } from \"date-fns\";\nimport { EventDetailsModal } from \"./EventDetailsModal\";\nimport { EditEventModal } from \"./EditEventModal\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface EventCardProps {\n  event: {\n    id: string;\n    title: string;\n    description: string;\n    location: string;\n    dateTime: string;\n    capacity: number;\n    price: string;\n    isPaid: boolean;\n    imageUrl?: string;\n    hostId?: string;\n    category?: {\n      name: string;\n      icon: string;\n      color: string;\n    };\n    attendingCount?: number;\n  };\n}\n\nconst categoryColorMap: Record<string, string> = {\n  blue: \"bg-blue-600\",\n  green: \"bg-green-600\", \n  purple: \"bg-purple-600\",\n  red: \"bg-red-600\",\n  yellow: \"bg-yellow-600\",\n  indigo: \"bg-indigo-600\",\n};\n\nexport function EventCard({ event }: EventCardProps) {\n  const [showDetails, setShowDetails] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user, isAuthenticated } = useAuth();\n\n  // Get current user's RSVP status\n  const { data: userRsvp } = useQuery({\n    queryKey: [`/api/events/${event.id}/user-rsvp`],\n    enabled: isAuthenticated,\n  });\n\n  // Get favorite status\n  const { data: favoriteData } = useQuery({\n    queryKey: [`/api/events/${event.id}/favorite`],\n    enabled: isAuthenticated,\n  });\n\n  const isLiked = favoriteData?.favorited || false;\n\n  const rsvpMutation = useMutation({\n    mutationFn: async (status: string) => {\n      return apiRequest(\"POST\", `/api/events/${event.id}/rsvp`, {\n        status,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/events/${event.id}/user-rsvp`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-rsvps\"] });\n      toast({\n        title: \"RSVP Updated\",\n        description: userRsvp ? \"Your RSVP has been updated.\" : \"You've successfully RSVP'd to this event!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update RSVP. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async () => {\n      console.log('Toggling favorite for event:', event.id);\n      return apiRequest(\"POST\", `/api/events/${event.id}/favorite`, {});\n    },\n    onSuccess: (data) => {\n      console.log('Favorite toggle success:', data);\n      queryClient.invalidateQueries({ queryKey: [`/api/events/${event.id}/favorite`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: data.favorited ? \"Added to Favorites\" : \"Removed from Favorites\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      console.error('Favorite toggle error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorite. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRSVP = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please sign in to RSVP to events.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    rsvpMutation.mutate(\"attending\");\n  };\n\n  const isAttending = userRsvp && typeof userRsvp === 'object' && 'status' in userRsvp ? userRsvp.status === \"attending\" : false;\n\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in Required\",\n        description: \"Please sign in to favorite events.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    favoriteMutation.mutate();\n  };\n\n  const eventDate = new Date(event.dateTime);\n  const categoryColor = event.category ? categoryColorMap[event.category.color] || \"bg-gray-600\" : \"bg-gray-600\";\n  \n  // Check if current user is the event host\n  const isHost = user && event.hostId === user.id;\n  \n  const deleteEventMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", `/api/events/${event.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-hosted-events\"] });\n      toast({\n        title: \"Event Deleted\",\n        description: \"Your event has been successfully deleted.\",\n      });\n    },\n    onError: (error) => {\n      console.error('Delete event error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\n      deleteEventMutation.mutate();\n    }\n  };\n\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  const handleEdit = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setShowEditModal(true);\n  };\n\n  const handleEditOld = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Open edit modal\n    toast({\n      title: \"Edit Event\",\n      description: \"Edit functionality will be available soon.\",\n    });\n  };\n  \n  const getCategoryIcon = (category: any) => {\n    if (!category) return Calendar;\n    \n    const iconMap: Record<string, any> = {\n      music: Music,\n      technology: Briefcase,\n      art: Palette,\n      sports: Trophy,\n      food: Coffee,\n      education: GraduationCap,\n      networking: Users,\n      health: Heart,\n      gaming: Gamepad2,\n      travel: MapPin,\n    };\n    \n    return iconMap[category.name?.toLowerCase()] || Calendar;\n  };\n\n  return (\n    <>\n      <Card \n        className=\"bg-white dark:bg-gray-700 rounded-xl shadow-lg overflow-hidden event-card-hover group cursor-pointer glow transition-all duration-300 hover:transform hover:scale-105\"\n        onClick={() => setShowDetails(true)}\n      >\n        <div \n          className=\"relative h-48 bg-cover bg-center\"\n          style={{\n            backgroundImage: event.imageUrl \n              ? `url(${event.imageUrl})` \n              : \"linear-gradient(135deg, rgb(99, 102, 241), rgb(139, 92, 246))\",\n          }}\n        >\n          {event.category && (\n            <div className=\"absolute top-4 left-4\">\n              <Badge className={`${categoryColor} text-white px-3 py-1 text-sm font-medium flex items-center`}>\n                {(() => {\n                  const IconComponent = getCategoryIcon(event.category);\n                  return <IconComponent className=\"h-4 w-4 mr-1\" />;\n                })()}\n                {event.category.name}\n              </Badge>\n            </div>\n          )}\n          \n          <div className=\"absolute top-4 right-4 flex gap-2\">\n            {isHost && (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"bg-white/90 hover:bg-white\"\n                  onClick={handleEdit}\n                  data-testid={`button-edit-${event.id}`}\n                >\n                  <Edit className=\"h-4 w-4 text-blue-600\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"bg-white/90 hover:bg-white\"\n                  onClick={handleDelete}\n                  data-testid={`button-delete-${event.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 text-red-600\" />\n                </Button>\n              </>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"bg-white/90 hover:bg-white\"\n              onClick={handleLike}\n              data-testid={`button-favorite-${event.id}`}\n            >\n              <Heart \n                className={`h-4 w-4 ${\n                  isLiked ? \"fill-red-500 text-red-500\" : \"text-gray-600\"\n                }`} \n              />\n            </Button>\n          </div>\n          \n          <div className=\"absolute bottom-4 left-4 bg-white/90 rounded-lg px-3 py-2\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">\n                {format(eventDate, \"dd\")}\n              </div>\n              <div className=\"text-xs text-gray-600\">\n                {format(eventDate, \"MMM\").toUpperCase()}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2 group-hover:text-primary transition-colors duration-200\">\n            {event.title}\n          </h3>\n          \n          <p className=\"text-gray-600 dark:text-gray-300 mb-4 line-clamp-2\">\n            {event.description}\n          </p>\n\n          <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            <span>{format(eventDate, \"MMM dd, yyyy • h:mm a\")}</span>\n          </div>\n\n          <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4\">\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            <span className=\"truncate\">{event.location}</span>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <div className=\"flex -space-x-2\">\n                {[1, 2, 3].map((i) => (\n                  <Avatar key={i} className=\"h-8 w-8 border-2 border-white\">\n                    <AvatarImage \n                      src={`https://i.pravatar.cc/100?img=${i}`} \n                      alt={`Attendee ${i}`} \n                    />\n                    <AvatarFallback>A{i}</AvatarFallback>\n                  </Avatar>\n                ))}\n              </div>\n              <span className=\"ml-2 text-sm text-gray-500 dark:text-gray-400\">\n                +{event.attendingCount || 0} going\n              </span>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-primary\">\n                {event.isPaid ? `$${event.price}` : \"Free\"}\n              </div>\n              <Button\n                onClick={handleRSVP}\n                disabled={rsvpMutation.isPending}\n                variant={isAttending ? \"outline\" : \"default\"}\n                className={`mt-2 px-4 py-2 text-sm font-medium ${\n                  isAttending \n                    ? \"border-green-500 text-green-600 hover:bg-green-50\" \n                    : \"bg-primary hover:bg-primary/90 text-white\"\n                }`}\n              >\n                {rsvpMutation.isPending ? (\n                  \"...\"\n                ) : isAttending ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-1\" />\n                    RSVP'd\n                  </>\n                ) : (\n                  \"RSVP\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {showDetails && (\n        <EventDetailsModal\n          eventId={event.id}\n          isOpen={showDetails}\n          onClose={() => setShowDetails(false)}\n        />\n      )}\n\n      {showEditModal && (\n        <EditEventModal\n          eventId={event.id}\n          isOpen={showEditModal}\n          onClose={() => setShowEditModal(false)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":12078},"client/src/components/EventDetailsModal.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Clock, MapPin, Users, Star, Calendar, DollarSign } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EventDetailsModalProps {\n  eventId: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function EventDetailsModal({ eventId, isOpen, onClose }: EventDetailsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: event, isLoading } = useQuery({\n    queryKey: [`/api/events/${eventId}`],\n    enabled: isOpen && !!eventId,\n  });\n\n  const { data: announcements } = useQuery({\n    queryKey: [`/api/events/${eventId}/announcements`],\n    enabled: isOpen && !!eventId,\n  });\n\n  const rsvpMutation = useMutation({\n    mutationFn: async (status: string) => {\n      return apiRequest(\"POST\", `/api/events/${eventId}/rsvp`, {\n        status,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/events/${eventId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-rsvps\"] });\n      toast({\n        title: \"RSVP Updated\",\n        description: \"Your RSVP has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update RSVP. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const syncToCalendarMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", `/api/events/${eventId}/sync-calendar`, {});\n    },\n    onSuccess: (data) => {\n      if (data.needsAuth && data.authUrl) {\n        // Open authorization window\n        window.open(data.authUrl, '_blank', 'width=500,height=600');\n        toast({\n          title: \"Calendar Authorization\",\n          description: \"Please authorize calendar access in the new window to sync this event.\",\n        });\n      } else {\n        toast({\n          title: \"Added to Calendar\",\n          description: \"Event has been synced to your Google Calendar.\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sync to calendar. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !event) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <div className=\"p-8 text-center\">Loading...</div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const eventDate = new Date(event.dateTime);\n  const categoryColor = event.category?.color || \"blue\";\n  const categoryColorMap: Record<string, string> = {\n    blue: \"bg-blue-600\",\n    green: \"bg-green-600\",\n    purple: \"bg-purple-600\",\n    red: \"bg-red-600\",\n    yellow: \"bg-yellow-600\",\n    indigo: \"bg-indigo-600\",\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        {/* Hero Image */}\n        <div \n          className=\"relative h-64 bg-cover bg-center rounded-lg -m-6 mb-6\"\n          style={{\n            backgroundImage: event.imageUrl \n              ? `url(${event.imageUrl})` \n              : \"linear-gradient(135deg, rgb(99, 102, 241), rgb(139, 92, 246))\",\n          }}\n        >\n          {event.category && (\n            <div className=\"absolute top-4 left-4\">\n              <Badge className={`${categoryColorMap[categoryColor]} text-white px-3 py-1`}>\n                <i className={`${event.category.icon} mr-1`}></i>\n                {event.category.name}\n              </Badge>\n            </div>\n          )}\n          \n          <div className=\"absolute bottom-4 left-4 bg-white/90 rounded-lg px-3 py-2\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">\n                {format(eventDate, \"dd\")}\n              </div>\n              <div className=\"text-xs text-gray-600\">\n                {format(eventDate, \"MMM\").toUpperCase()}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              {event.title}\n            </h1>\n            <div className=\"flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center\">\n                <Star className=\"h-4 w-4 mr-1 text-yellow-400\" />\n                <span>{event.averageRating?.toFixed(1) || \"No rating\"}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Users className=\"h-4 w-4 mr-1\" />\n                <span>{event.attendingCount || 0} attending</span>\n              </div>\n              {event.host && (\n                <div className=\"flex items-center\">\n                  <span>Hosted by {event.host.name}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Event Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 mr-3 text-gray-400\" />\n                <div>\n                  <div className=\"font-medium\">\n                    {format(eventDate, \"EEEE, MMMM dd, yyyy\")}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {format(eventDate, \"h:mm a\")}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-5 w-5 mr-3 text-gray-400\" />\n                <div>\n                  <div className=\"font-medium\">{event.location}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-5 w-5 mr-3 text-gray-400\" />\n                <div>\n                  <div className=\"font-medium\">\n                    {event.isPaid ? `$${event.price}` : \"Free\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <Users className=\"h-5 w-5 mr-3 text-gray-400\" />\n                <div>\n                  <div className=\"font-medium\">\n                    {event.capacity} spots available\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {event.attendingCount || 0} people going\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Button\n                onClick={() => rsvpMutation.mutate(\"attending\")}\n                disabled={rsvpMutation.isPending}\n                className=\"w-full bg-primary hover:bg-primary/90\"\n              >\n                {rsvpMutation.isPending ? \"Updating...\" : \"RSVP to Event\"}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => syncToCalendarMutation.mutate()}\n                disabled={syncToCalendarMutation.isPending}\n                className=\"w-full\"\n              >\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                {syncToCalendarMutation.isPending ? \"Syncing...\" : \"Add to Calendar\"}\n              </Button>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Description */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2\">About this event</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n              {event.description}\n            </p>\n          </div>\n\n          {/* Tags */}\n          {event.tags && event.tags.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Tags</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {event.tags.map((tag: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Announcements */}\n          {announcements && announcements.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Announcements</h3>\n              <div className=\"space-y-3\">\n                {announcements.map((announcement: any) => (\n                  <div key={announcement.id} className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border-l-4 border-blue-500\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-blue-900 dark:text-blue-300 mb-1\">\n                          {announcement.subject}\n                        </h4>\n                        <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                          {announcement.message}\n                        </p>\n                      </div>\n                      <div className=\"text-xs text-blue-600 dark:text-blue-400 ml-4\">\n                        {format(new Date(announcement.createdAt), \"MMM dd, h:mm a\")}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Attendees */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2\">Who's going</h3>\n            {event.attendingCount > 0 ? (\n              <div className=\"text-gray-600 dark:text-gray-300\">\n                {event.attendingCount} {event.attendingCount === 1 ? 'person is' : 'people are'} attending\n              </div>\n            ) : (\n              <div className=\"text-gray-500 dark:text-gray-400\">\n                Be the first to RSVP!\n              </div>\n            )}\n          </div>\n\n          {/* Reviews */}\n          {event.reviews && event.reviews.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Reviews</h3>\n              <div className=\"space-y-4\">\n                {event.reviews.slice(0, 3).map((review: any) => (\n                  <div key={review.id} className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n                    <div className=\"flex items-center mb-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        {[1, 2, 3, 4, 5].map((star) => (\n                          <Star\n                            key={star}\n                            className={`h-4 w-4 ${\n                              star <= review.rating \n                                ? \"text-yellow-400 fill-current\" \n                                : \"text-gray-300\"\n                            }`}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      {review.comment}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11711},"client/src/components/Navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Bell, Calendar, Moon, Sun, User, Menu, LogOut, Settings, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { NotificationDropdown } from \"@/components/NotificationDropdown\";\nimport { CreateEventModal } from \"@/components/CreateEventModal\";\n\nconst navigation = [\n  { name: \"Browse Events\", href: \"/\" },\n  { name: \"My Events\", href: \"/dashboard\" },\n  { name: \"Host Dashboard\", href: \"/host\" },\n  { name: \"Past Events\", href: \"/past-events\" },\n  { name: \"Calendar\", href: \"/calendar\" },\n  { name: \"Calendar\", href: \"/calendar\" },\n];\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const { user, signOut, isAuthenticated, signInWithGoogle } = useAuth();\n\n  // Show different navbar for authenticated vs non-authenticated users\n  if (!isAuthenticated) {\n    return (\n      <nav className=\"bg-white/80 dark:bg-gray-900/80 backdrop-blur-md shadow-lg sticky top-0 z-50 transition-all duration-300 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mr-3\">\n                  <Calendar className=\"h-6 w-6 text-white\" />\n                </div>\n                <Link href=\"/\">\n                  <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent cursor-pointer\">\n                    EventHub\n                  </span>\n                </Link>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"ghost\" size=\"icon\" onClick={toggleTheme} className=\"hover:bg-gray-100 dark:hover:bg-gray-800\">\n                {theme === \"light\" ? (\n                  <Moon className=\"h-5 w-5\" />\n                ) : (\n                  <Sun className=\"h-5 w-5\" />\n                )}\n              </Button>\n              <Button onClick={signInWithGoogle} className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n                Sign In with Google\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  return (\n    <nav className=\"bg-white/80 dark:bg-gray-900/80 backdrop-blur-md shadow-lg sticky top-0 z-50 transition-all duration-300 border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mr-3\">\n                <Calendar className=\"h-6 w-6 text-white\" />\n              </div>\n              <Link href=\"/\">\n                <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent cursor-pointer\">\n                  EventHub\n                </span>\n              </Link>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:ml-10 md:flex md:space-x-1\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <span\n                    className={`px-4 py-2 rounded-lg text-sm font-medium cursor-pointer transition-all duration-200 ${\n                      location === item.href\n                        ? \"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300\"\n                        : \"text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white\"\n                    }`}\n                  >\n                    {item.name}\n                  </span>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {/* Create Event Button */}\n            <Button \n              variant=\"default\" \n              size=\"sm\" \n              onClick={() => setShowCreateModal(true)}\n              className=\"hidden sm:flex bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white border-0\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Event\n            </Button>\n\n            {/* Notifications */}\n            <NotificationDropdown />\n\n            {/* Theme Toggle */}\n            <Button variant=\"ghost\" size=\"icon\" onClick={toggleTheme} className=\"hover:bg-gray-100 dark:hover:bg-gray-800\">\n              {theme === \"light\" ? (\n                <Moon className=\"h-5 w-5\" />\n              ) : (\n                <Sun className=\"h-5 w-5\" />\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800\">\n                  <Avatar className=\"h-9 w-9\">\n                    <AvatarImage src={user?.avatar || undefined} alt={user?.name} />\n                    <AvatarFallback className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold\">\n                      {user?.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-64 p-2\" align=\"end\" forceMount>\n                <div className=\"flex items-center space-x-3 p-2 mb-2\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user?.avatar || undefined} alt={user?.name} />\n                    <AvatarFallback className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n                      {user?.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{user?.name}</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>My Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Settings</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  <span>Notifications</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"cursor-pointer text-red-600 dark:text-red-400\" onClick={signOut}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sign Out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile Menu */}\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden hover:bg-gray-100 dark:hover:bg-gray-800\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <div className=\"flex items-center space-x-3 p-4 border-b\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user?.avatar || undefined} alt={user?.name} />\n                    <AvatarFallback className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n                      {user?.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white\">{user?.name}</p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{user?.email}</p>\n                  </div>\n                </div>\n                \n                <nav className=\"flex flex-col space-y-2 p-4\">\n                  <Button \n                    className=\"justify-start mb-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white\"\n                    onClick={() => {\n                      setShowCreateModal(true);\n                      setMobileMenuOpen(false);\n                    }}\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Event\n                  </Button>\n                  \n                  {navigation.map((item) => (\n                    <Link key={item.name} href={item.href}>\n                      <span\n                        className={`flex items-center px-3 py-3 text-base font-medium cursor-pointer transition-colors rounded-lg ${\n                          location === item.href\n                            ? \"text-blue-700 dark:text-blue-300 bg-blue-100 dark:bg-blue-900\"\n                            : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800\"\n                        }`}\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        {item.name}\n                      </span>\n                    </Link>\n                  ))}\n                  \n                  <div className=\"border-t pt-4 mt-4\">\n                    <button \n                      className=\"flex items-center w-full px-3 py-3 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors\" \n                      onClick={signOut}\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Sign Out</span>\n                    </button>\n                  </div>\n                </nav>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n      \n      {/* Create Event Modal */}\n      <CreateEventModal \n        isOpen={showCreateModal} \n        onClose={() => setShowCreateModal(false)} \n      />\n    </nav>\n  );\n}\n","size_bytes":11546},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1193},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  googleId?: string;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check authentication status on mount\n    fetch('/api/auth/me', { credentials: 'include' })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Not authenticated');\n      })\n      .then(data => {\n        setUser(data.user);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setUser(null);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const signOut = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setUser(null);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  const signInWithGoogle = () => {\n    window.location.href = '/api/auth/google';\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    signOut,\n    signInWithGoogle,\n  };\n}","size_bytes":1268},"client/src/lib/auth.ts":{"content":"interface GoogleUser {\n  sub: string;\n  email: string;\n  name: string;\n  picture: string;\n}\n\ninterface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    googleId?: string;\n  };\n}\n\nclass AuthService {\n  private user: AuthResponse['user'] | null = null;\n\n  async initializeGoogleAuth(): Promise<void> {\n    // Load Google Sign-In script\n    if (!window.google) {\n      await this.loadGoogleScript();\n    }\n\n    // Initialize Google Identity Services\n    window.google.accounts.id.initialize({\n      client_id: import.meta.env.VITE_GOOGLE_CLIENT_ID || process.env.GOOGLE_CLIENT_ID || \"\",\n      callback: this.handleCredentialResponse.bind(this),\n      auto_select: false,\n    });\n  }\n\n  private loadGoogleScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (document.getElementById('google-signin-script')) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.id = 'google-signin-script';\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Sign-In script'));\n      document.head.appendChild(script);\n    });\n  }\n\n  private async handleCredentialResponse(response: any) {\n    try {\n      // Decode the JWT token to get user info\n      const token = response.credential;\n      const payload = this.parseJwt(token);\n      \n      const googleUser: GoogleUser = {\n        sub: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n      };\n\n      // Send to backend for authentication\n      const authResponse = await fetch('/api/auth/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token,\n          user: googleUser,\n        }),\n        credentials: 'include',\n      });\n\n      if (!authResponse.ok) {\n        throw new Error('Authentication failed');\n      }\n\n      const { user } = await authResponse.json();\n      this.user = user;\n      \n      // Dispatch custom event for auth state change\n      window.dispatchEvent(new CustomEvent('auth-state-changed', {\n        detail: { user, isAuthenticated: true }\n      }));\n\n    } catch (error) {\n      console.error('Authentication error:', error);\n      throw error;\n    }\n  }\n\n  private parseJwt(token: string): any {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split('')\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    );\n    return JSON.parse(jsonPayload);\n  }\n\n  async signInWithGoogle(): Promise<void> {\n    await this.initializeGoogleAuth();\n    \n    // Trigger the Google Sign-In flow\n    window.google.accounts.id.prompt((notification: any) => {\n      if (notification.isNotDisplayed() || notification.isSkippedMoment()) {\n        // Fallback to renderButton if prompt is not shown\n        this.renderSignInButton();\n      }\n    });\n  }\n\n  renderSignInButton(elementId: string = 'google-signin-button'): void {\n    const element = document.getElementById(elementId);\n    if (!element) return;\n\n    window.google.accounts.id.renderButton(element, {\n      theme: 'outline',\n      size: 'large',\n      text: 'signin_with',\n      shape: 'rectangular',\n    });\n  }\n\n  async getCurrentUser(): Promise<AuthResponse['user'] | null> {\n    if (this.user) {\n      return this.user;\n    }\n\n    try {\n      const response = await fetch('/api/auth/me', {\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const { user } = await response.json();\n        this.user = user;\n        return user;\n      }\n    } catch (error) {\n      console.error('Failed to get current user:', error);\n    }\n\n    return null;\n  }\n\n  async signOut(): Promise<void> {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n    } catch (error) {\n      console.error('Sign out error:', error);\n    } finally {\n      this.user = null;\n      window.google?.accounts.id.disableAutoSelect();\n      \n      // Dispatch custom event for auth state change\n      window.dispatchEvent(new CustomEvent('auth-state-changed', {\n        detail: { user: null, isAuthenticated: false }\n      }));\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return this.user !== null;\n  }\n\n  getUser(): AuthResponse['user'] | null {\n    return this.user;\n  }\n}\n\nexport const authService = new AuthService();\n\nimport { useState, useEffect } from \"react\";\n\n// React hook for auth state\nexport function useAuth() {\n  const [user, setUser] = useState<AuthResponse['user'] | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Initialize auth state\n    authService.getCurrentUser().then((user) => {\n      setUser(user);\n      setIsLoading(false);\n    });\n\n    // Listen for auth state changes\n    const handleAuthStateChange = (event: CustomEvent) => {\n      setUser(event.detail.user);\n    };\n\n    window.addEventListener('auth-state-changed', handleAuthStateChange as EventListener);\n\n    return () => {\n      window.removeEventListener('auth-state-changed', handleAuthStateChange as EventListener);\n    };\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    signIn: authService.signInWithGoogle.bind(authService),\n    signOut: authService.signOut.bind(authService),\n  };\n}\n\n// Extend window interface for TypeScript\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n","size_bytes":5767},"client/src/lib/calendar.ts":{"content":"interface CalendarEvent {\n  id: string;\n  title: string;\n  description: string;\n  location: string;\n  startDateTime: string;\n  endDateTime: string;\n  timeZone?: string;\n}\n\ninterface GoogleCalendarResponse {\n  success: boolean;\n  eventId?: string;\n  error?: string;\n}\n\nclass CalendarService {\n  private isGapiLoaded = false;\n  private isGapiInitialized = false;\n\n  async loadGoogleCalendarAPI(): Promise<void> {\n    if (this.isGapiLoaded) return;\n\n    return new Promise((resolve, reject) => {\n      if (window.gapi) {\n        this.isGapiLoaded = true;\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://apis.google.com/js/api.js';\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        this.isGapiLoaded = true;\n        resolve();\n      };\n      script.onerror = () => reject(new Error('Failed to load Google Calendar API'));\n      document.head.appendChild(script);\n    });\n  }\n\n  async initializeGoogleCalendar(): Promise<void> {\n    if (this.isGapiInitialized) return;\n\n    await this.loadGoogleCalendarAPI();\n\n    return new Promise((resolve, reject) => {\n      window.gapi.load('client:auth2', async () => {\n        try {\n          await window.gapi.client.init({\n            apiKey: import.meta.env.VITE_GOOGLE_API_KEY || process.env.GOOGLE_API_KEY || \"\",\n            clientId: import.meta.env.VITE_GOOGLE_CLIENT_ID || process.env.GOOGLE_CLIENT_ID || \"\",\n            discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'],\n            scope: 'https://www.googleapis.com/auth/calendar.events'\n          });\n          \n          this.isGapiInitialized = true;\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  async addEventToCalendar(event: CalendarEvent): Promise<GoogleCalendarResponse> {\n    try {\n      await this.initializeGoogleCalendar();\n\n      // Check if user is signed in\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance.isSignedIn.get()) {\n        await authInstance.signIn();\n      }\n\n      // Calculate end time (default to 2 hours after start)\n      const startDate = new Date(event.startDateTime);\n      const endDate = new Date(event.endDateTime || new Date(startDate.getTime() + 2 * 60 * 60 * 1000));\n\n      const calendarEvent = {\n        summary: event.title,\n        description: event.description,\n        location: event.location,\n        start: {\n          dateTime: startDate.toISOString(),\n          timeZone: event.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n        },\n        end: {\n          dateTime: endDate.toISOString(),\n          timeZone: event.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n        },\n        reminders: {\n          useDefault: false,\n          overrides: [\n            { method: 'email', minutes: 24 * 60 }, // 24 hours before\n            { method: 'popup', minutes: 60 }, // 1 hour before\n          ],\n        },\n      };\n\n      const response = await window.gapi.client.calendar.events.insert({\n        calendarId: 'primary',\n        resource: calendarEvent,\n      });\n\n      return {\n        success: true,\n        eventId: response.result.id,\n      };\n    } catch (error) {\n      console.error('Failed to add event to calendar:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  async updateCalendarEvent(eventId: string, event: CalendarEvent): Promise<GoogleCalendarResponse> {\n    try {\n      await this.initializeGoogleCalendar();\n\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance.isSignedIn.get()) {\n        await authInstance.signIn();\n      }\n\n      const startDate = new Date(event.startDateTime);\n      const endDate = new Date(event.endDateTime || new Date(startDate.getTime() + 2 * 60 * 60 * 1000));\n\n      const calendarEvent = {\n        summary: event.title,\n        description: event.description,\n        location: event.location,\n        start: {\n          dateTime: startDate.toISOString(),\n          timeZone: event.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n        },\n        end: {\n          dateTime: endDate.toISOString(),\n          timeZone: event.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n        },\n      };\n\n      const response = await window.gapi.client.calendar.events.update({\n        calendarId: 'primary',\n        eventId: eventId,\n        resource: calendarEvent,\n      });\n\n      return {\n        success: true,\n        eventId: response.result.id,\n      };\n    } catch (error) {\n      console.error('Failed to update calendar event:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  async removeCalendarEvent(eventId: string): Promise<GoogleCalendarResponse> {\n    try {\n      await this.initializeGoogleCalendar();\n\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance.isSignedIn.get()) {\n        await authInstance.signIn();\n      }\n\n      await window.gapi.client.calendar.events.delete({\n        calendarId: 'primary',\n        eventId: eventId,\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to remove calendar event:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  async getCalendarEvents(startDate?: Date, endDate?: Date): Promise<CalendarEvent[]> {\n    try {\n      await this.initializeGoogleCalendar();\n\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance.isSignedIn.get()) {\n        await authInstance.signIn();\n      }\n\n      const timeMin = startDate ? startDate.toISOString() : new Date().toISOString();\n      const timeMax = endDate ? endDate.toISOString() : undefined;\n\n      const response = await window.gapi.client.calendar.events.list({\n        calendarId: 'primary',\n        timeMin: timeMin,\n        timeMax: timeMax,\n        singleEvents: true,\n        orderBy: 'startTime',\n      });\n\n      return response.result.items.map((item: any) => ({\n        id: item.id,\n        title: item.summary,\n        description: item.description || '',\n        location: item.location || '',\n        startDateTime: item.start.dateTime || item.start.date,\n        endDateTime: item.end.dateTime || item.end.date,\n        timeZone: item.start.timeZone,\n      }));\n    } catch (error) {\n      console.error('Failed to get calendar events:', error);\n      return [];\n    }\n  }\n\n  // Helper method to create Google Calendar quick add link\n  createQuickAddLink(event: CalendarEvent): string {\n    const params = new URLSearchParams({\n      action: 'TEMPLATE',\n      text: event.title,\n      dates: `${this.formatDateForGoogle(event.startDateTime)}/${this.formatDateForGoogle(event.endDateTime || event.startDateTime)}`,\n      details: event.description,\n      location: event.location,\n    });\n\n    return `https://calendar.google.com/calendar/render?${params.toString()}`;\n  }\n\n  private formatDateForGoogle(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n  }\n\n  // Create calendar download file (.ics)\n  createICSFile(event: CalendarEvent): string {\n    const startDate = new Date(event.startDateTime);\n    const endDate = new Date(event.endDateTime || new Date(startDate.getTime() + 2 * 60 * 60 * 1000));\n    \n    const formatDate = (date: Date) => {\n      return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n    };\n\n    const icsContent = [\n      'BEGIN:VCALENDAR',\n      'VERSION:2.0',\n      'PRODID:-//EventHub//EventHub Calendar//EN',\n      'BEGIN:VEVENT',\n      `UID:${event.id}@eventhub.com`,\n      `DTSTART:${formatDate(startDate)}`,\n      `DTEND:${formatDate(endDate)}`,\n      `SUMMARY:${event.title}`,\n      `DESCRIPTION:${event.description.replace(/\\n/g, '\\\\n')}`,\n      `LOCATION:${event.location}`,\n      'STATUS:CONFIRMED',\n      'BEGIN:VALARM',\n      'ACTION:DISPLAY',\n      'DESCRIPTION:Event Reminder',\n      'TRIGGER:-PT1H',\n      'END:VALARM',\n      'END:VEVENT',\n      'END:VCALENDAR',\n    ].join('\\r\\n');\n\n    return icsContent;\n  }\n\n  downloadICSFile(event: CalendarEvent): void {\n    const icsContent = this.createICSFile(event);\n    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });\n    const url = window.URL.createObjectURL(blob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `${event.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.ics`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n}\n\nexport const calendarService = new CalendarService();\n\nimport { useState } from \"react\";\n\n// React hook for calendar operations\nexport function useCalendar() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const addToCalendar = async (event: CalendarEvent): Promise<GoogleCalendarResponse> => {\n    setIsLoading(true);\n    try {\n      const result = await calendarService.addEventToCalendar(event);\n      return result;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateEvent = async (eventId: string, event: CalendarEvent): Promise<GoogleCalendarResponse> => {\n    setIsLoading(true);\n    try {\n      const result = await calendarService.updateCalendarEvent(eventId, event);\n      return result;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const removeEvent = async (eventId: string): Promise<GoogleCalendarResponse> => {\n    setIsLoading(true);\n    try {\n      const result = await calendarService.removeCalendarEvent(eventId);\n      return result;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const downloadEvent = (event: CalendarEvent): void => {\n    calendarService.downloadICSFile(event);\n  };\n\n  const getQuickAddLink = (event: CalendarEvent): string => {\n    return calendarService.createQuickAddLink(event);\n  };\n\n  return {\n    isLoading,\n    addToCalendar,\n    updateEvent,\n    removeEvent,\n    downloadEvent,\n    getQuickAddLink,\n  };\n}\n\n// Extend window interface for TypeScript\ndeclare global {\n  interface Window {\n    gapi: any;\n  }\n}\n","size_bytes":10466},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/DashboardPage.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar, CheckCircle, Crown, Users, ExternalLink, Clock, Music, Gamepad2, Coffee, Briefcase, Heart, GraduationCap, MapPin, Palette, Trophy, Plus, MoreHorizontal, Edit, Megaphone, Trash2, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport Navbar from \"@/components/Navbar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { EventDetailsModal } from \"@/components/EventDetailsModal\";\n\nexport default function DashboardPage() {\n  const [activeTab, setActiveTab] = useState(\"upcoming\");\n  const [selectedEventId, setSelectedEventId] = useState<string | null>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { data: userRsvps = [] } = useQuery({\n    queryKey: [\"/api/my-rsvps\"],\n    enabled: !!user,\n  });\n\n  const { data: hostedEvents = [] } = useQuery({\n    queryKey: [\"/api/my-hosted-events\"],\n    enabled: !!user,\n  });\n\n  const { data: favoriteEvents = [] } = useQuery({\n    queryKey: [\"/api/users\", user?.id, \"favorites\"],\n    enabled: !!user?.id,\n  });\n\n  const upcomingEvents = Array.isArray(userRsvps) ? userRsvps.filter((rsvp: any) => \n    rsvp.event && new Date(rsvp.event.dateTime) > new Date() && rsvp.status === \"attending\"\n  ) : [];\n\n  const pastEvents = Array.isArray(userRsvps) ? userRsvps.filter((rsvp: any) => \n    rsvp.event && new Date(rsvp.event.dateTime) < new Date() && rsvp.status === \"attending\"\n  ) : [];\n\n  const stats = [\n    {\n      title: \"Upcoming Events\",\n      value: upcomingEvents.length,\n      icon: Calendar,\n      color: \"text-blue-600 dark:text-blue-400\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n    },\n    {\n      title: \"Past Events\", \n      value: pastEvents.length,\n      icon: CheckCircle,\n      color: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-100 dark:bg-green-900\",\n    },\n    {\n      title: \"Events Hosted\",\n      value: Array.isArray(hostedEvents) ? hostedEvents.length : 0,\n      icon: Crown,\n      color: \"text-purple-600 dark:text-purple-400\",\n      bgColor: \"bg-purple-100 dark:bg-purple-900\",\n    },\n    {\n      title: \"Total Attendees\",\n      value: Array.isArray(hostedEvents) ? hostedEvents.reduce((total: number, event: any) => total + (event.attendingCount || 0), 0) : 0,\n      icon: Users,\n      color: \"text-yellow-600 dark:text-yellow-400\",\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900\",\n    },\n  ];\n\n  const tabButtons = [\n    { id: \"upcoming\", label: \"Upcoming\" },\n    { id: \"past\", label: \"Past Events\" },\n    { id: \"hosting\", label: \"Host Dashboard\" },\n    { id: \"favorites\", label: \"Favorites\" },\n  ];\n\n  const getCategoryIcon = (category: any) => {\n    if (!category) return Calendar;\n    \n    const iconMap: Record<string, any> = {\n      music: Music,\n      technology: Briefcase,\n      art: Palette,\n      sports: Trophy,\n      food: Coffee,\n      education: GraduationCap,\n      networking: Users,\n      health: Heart,\n      gaming: Gamepad2,\n      travel: MapPin,\n    };\n    \n    return iconMap[category.name?.toLowerCase()] || Calendar;\n  };\n\n  const getCategoryColor = (category: any) => {\n    if (!category) return \"bg-gray-600\";\n    const colorMap: Record<string, string> = {\n      blue: \"bg-blue-600\",\n      green: \"bg-green-600\",\n      purple: \"bg-purple-600\",\n      red: \"bg-red-600\",\n      yellow: \"bg-yellow-600\",\n      indigo: \"bg-indigo-600\",\n    };\n    return colorMap[category.color] || \"bg-gray-600\";\n  };\n\n  // Calendar sync mutation\n  const calendarSyncMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      return apiRequest(\"POST\", `/api/events/${eventId}/sync-calendar`, {});\n    },\n    onSuccess: (data) => {\n      if (data.needsAuth && data.authUrl) {\n        // Open authorization window\n        window.open(data.authUrl, '_blank', 'width=500,height=600');\n        toast({\n          title: \"Calendar Authorization\",\n          description: \"Please authorize calendar access in the new window to sync this event.\",\n        });\n      } else {\n        toast({\n          title: \"Calendar Sync\",\n          description: \"Event has been added to your Google Calendar!\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Calendar Sync Failed\",\n        description: \"Failed to add event to calendar. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCalendarSync = (eventId: string) => {\n    calendarSyncMutation.mutate(eventId);\n  };\n\n  // Event management handlers\n  const handleEditEvent = (eventId: string) => {\n    // Navigate to edit event page or open edit modal\n    toast({\n      title: \"Edit Event\",\n      description: \"Edit functionality coming soon!\",\n    });\n  };\n\n  const [showAnnouncementModal, setShowAnnouncementModal] = useState(false);\n  const [selectedEventForAnnouncement, setSelectedEventForAnnouncement] = useState<string | null>(null);\n  const [announcementSubject, setAnnouncementSubject] = useState(\"\");\n  const [announcementMessage, setAnnouncementMessage] = useState(\"\");\n\n  const announcementMutation = useMutation({\n    mutationFn: (data: { eventId: string; subject: string; message: string }) =>\n      apiRequest(\"POST\", `/api/events/${data.eventId}/announcements`, {\n        subject: data.subject,\n        message: data.message,\n      }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Announcement Sent\",\n        description: `Announcement sent to ${data.recipientCount} attendees`,\n      });\n      setShowAnnouncementModal(false);\n      setAnnouncementSubject(\"\");\n      setAnnouncementMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Send\",\n        description: \"Failed to send announcement. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendAnnouncement = (eventId: string) => {\n    setSelectedEventForAnnouncement(eventId);\n    setShowAnnouncementModal(true);\n  };\n\n  const submitAnnouncement = () => {\n    if (!selectedEventForAnnouncement || !announcementSubject.trim() || !announcementMessage.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in both subject and message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    announcementMutation.mutate({\n      eventId: selectedEventForAnnouncement,\n      subject: announcementSubject,\n      message: announcementMessage,\n    });\n  };\n\n  const deleteEventMutation = useMutation({\n    mutationFn: (eventId: string) => apiRequest(\"DELETE\", `/api/events/${eventId}`),\n    onSuccess: () => {\n      toast({\n        title: \"Event Deleted\",\n        description: \"Your event has been deleted successfully.\",\n      });\n      // Refresh the hosted events list\n      window.location.reload();\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteEvent = (eventId: string) => {\n    if (confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\n      deleteEventMutation.mutate(eventId);\n    }\n  };\n\n  // Favorites handler\n  const favoriteMutation = useMutation({\n    mutationFn: (eventId: string) => apiRequest(\"POST\", `/api/events/${eventId}/favorite`, {}),\n    onSuccess: (data) => {\n      toast({\n        title: data.favorited ? \"Added to Favorites\" : \"Removed from Favorites\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorite. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavoriteToggle = (eventId: string) => {\n    favoriteMutation.mutate(eventId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center mb-8\">\n          My Events Dashboard\n        </h1>\n        \n        {/* Dashboard Navigation */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-8\">\n          {tabButtons.map((tab) => (\n            <Button\n              key={tab.id}\n              variant={activeTab === tab.id ? \"default\" : \"outline\"}\n              onClick={() => setActiveTab(tab.id)}\n              className={`px-6 py-3 font-semibold ${activeTab === tab.id ? 'glow' : ''}`}\n              data-testid={`tab-${tab.id}`}\n            >\n              {tab.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          {stats.map((stat, index) => {\n            const glowClass = index === 0 ? 'glow' : index === 1 ? 'glow-green' : index === 2 ? 'glow-purple' : 'glow-orange';\n            return (\n              <Card key={index} className={`bg-white dark:bg-gray-800 ${glowClass} transition-all duration-300 hover:scale-105`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-1\">\n                        {stat.title}\n                      </p>\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        {stat.value}\n                      </p>\n                    </div>\n                    <div className={`${stat.bgColor} rounded-full p-3`}>\n                      <stat.icon className={`h-6 w-6 ${stat.color}`} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* My Upcoming Events */}\n        {activeTab === \"upcoming\" && (\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                My Upcoming Events\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {upcomingEvents.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No upcoming events. Browse events to RSVP!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {upcomingEvents.map((rsvp: any) => (\n                    <div \n                      key={rsvp.id} \n                      className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-200\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`${getCategoryColor(rsvp.event.category)} rounded-lg p-3`}>\n                          {(() => {\n                            const IconComponent = getCategoryIcon(rsvp.event.category);\n                            return <IconComponent className=\"h-5 w-5 text-white\" />;\n                          })()}\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                            {rsvp.event.title}\n                          </h4>\n                          <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 space-x-4\">\n                            <span className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 mr-1\" />\n                              {format(new Date(rsvp.event.dateTime), \"MMM dd, yyyy • h:mm a\")}\n                            </span>\n                            {rsvp.event.category && (\n                              <Badge variant=\"secondary\">\n                                {rsvp.event.category.name}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          title=\"Add to Calendar\"\n                          onClick={() => handleCalendarSync(rsvp.event.id)}\n                          disabled={calendarSyncMutation.isPending}\n                          data-testid={`button-calendar-sync-${rsvp.event.id}`}\n                        >\n                          <Calendar className=\"h-4 w-4 text-primary\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          title=\"View Details\"\n                          onClick={() => setSelectedEventId(rsvp.event.id)}\n                          data-testid={`button-view-details-${rsvp.event.id}`}\n                        >\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Past Events */}\n        {activeTab === \"past\" && (\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                Past Events\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pastEvents.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No past events yet.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pastEvents.map((rsvp: any) => (\n                    <div \n                      key={rsvp.id} \n                      className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`${getCategoryColor(rsvp.event.category)} rounded-lg p-3`}>\n                          {(() => {\n                            const IconComponent = getCategoryIcon(rsvp.event.category);\n                            return <IconComponent className=\"h-5 w-5 text-white\" />;\n                          })()}\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                            {rsvp.event.title}\n                          </h4>\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            {format(new Date(rsvp.event.dateTime), \"MMM dd, yyyy\")}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n                          Attended\n                        </Badge>\n                        <div className=\"mt-2 flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Rate & Review\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\"\n                            onClick={() => handleFavoriteToggle(rsvp.event.id)}\n                            title=\"Add to Favorites\"\n                          >\n                            <Heart className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Host Dashboard */}\n        {activeTab === \"hosting\" && (\n          <div className=\"space-y-6\">\n            {/* Created Events Section */}\n            <Card className=\"bg-white dark:bg-gray-800\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    My Created Events ({Array.isArray(hostedEvents) ? hostedEvents.length : 0})\n                  </CardTitle>\n                  <Button \n                    className=\"bg-primary hover:bg-primary/90\"\n                    onClick={() => window.location.href = '/create'}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Event\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {Array.isArray(hostedEvents) && hostedEvents.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n                      You haven't created any events yet.\n                    </p>\n                    <Button \n                      className=\"bg-primary hover:bg-primary/90\"\n                      onClick={() => window.location.href = '/create'}\n                    >\n                      Create Your First Event\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {Array.isArray(hostedEvents) && hostedEvents.map((event: any) => (\n                      <div \n                        key={event.id} \n                        className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start space-x-4 flex-1\">\n                            <div className={`${getCategoryColor(event.category)} rounded-lg p-3`}>\n                              {(() => {\n                                const IconComponent = getCategoryIcon(event.category);\n                                return <IconComponent className=\"h-5 w-5 text-white\" />;\n                              })()}\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-gray-900 dark:text-white text-lg mb-2\">\n                                {event.title}\n                              </h4>\n                              <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-3\">\n                                {event.description}\n                              </p>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                                <span className=\"flex items-center\">\n                                  <Clock className=\"h-4 w-4 mr-1\" />\n                                  {format(new Date(event.dateTime), \"MMM dd, yyyy\")}\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <MapPin className=\"h-4 w-4 mr-1\" />\n                                  {event.location}\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <Users className=\"h-4 w-4 mr-1\" />\n                                  {event.attendingCount || 0}/{event.capacity} attending\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <DollarSign className=\"h-4 w-4 mr-1\" />\n                                  {event.isPaid ? `$${event.price}` : \"Free\"}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col space-y-2 ml-4\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => setSelectedEventId(event.id)}\n                              data-testid={`button-view-details-${event.id}`}\n                            >\n                              <ExternalLink className=\"h-4 w-4 mr-1\" />\n                              View Details\n                            </Button>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"w-full\">\n                                  <MoreHorizontal className=\"h-4 w-4 mr-1\" />\n                                  Manage\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event.id)}>\n                                  <Edit className=\"h-4 w-4 mr-2\" />\n                                  Edit Event\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleSendAnnouncement(event.id)}>\n                                  <Megaphone className=\"h-4 w-4 mr-2\" />\n                                  Send Announcement\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleCalendarSync(event.id)}>\n                                  <Calendar className=\"h-4 w-4 mr-2\" />\n                                  Add to Calendar\n                                </DropdownMenuItem>\n                                <DropdownMenuSeparator />\n                                <DropdownMenuItem \n                                  onClick={() => handleDeleteEvent(event.id)}\n                                  className=\"text-red-600 dark:text-red-400\"\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Delete Event\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Favorites Tab */}\n        {activeTab === \"favorites\" && (\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                Favorite Events\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {Array.isArray(favoriteEvents) && favoriteEvents.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No favorite events yet. Heart some events to see them here!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {Array.isArray(favoriteEvents) && favoriteEvents.map((favorite: any) => {\n                    // Get the event data from the favorite\n                    const event = favorite.event;\n                    if (!event) return null;\n                    \n                    return (\n                      <div \n                        key={favorite.id} \n                        className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-200\"\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`${getCategoryColor(event.category)} rounded-lg p-3`}>\n                            {(() => {\n                              const IconComponent = getCategoryIcon(event.category);\n                              return <IconComponent className=\"h-5 w-5 text-white\" />;\n                            })()}\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                              {event.title}\n                            </h4>\n                            <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 space-x-4\">\n                              <span className=\"flex items-center\">\n                                <Clock className=\"h-4 w-4 mr-1\" />\n                                {format(new Date(event.dateTime), \"MMM dd, yyyy • h:mm a\")}\n                              </span>\n                              <span className=\"flex items-center\">\n                                <MapPin className=\"h-4 w-4 mr-1\" />\n                                {event.location}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedEventId(event.id)}\n                          >\n                            View Details\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Event Details Modal */}\n      {selectedEventId && (\n        <EventDetailsModal\n          eventId={selectedEventId}\n          isOpen={!!selectedEventId}\n          onClose={() => setSelectedEventId(null)}\n        />\n      )}\n\n      {/* Announcement Modal */}\n      <Dialog open={showAnnouncementModal} onOpenChange={setShowAnnouncementModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Send Announcement</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"subject\">Subject</Label>\n              <Input\n                id=\"subject\"\n                value={announcementSubject}\n                onChange={(e) => setAnnouncementSubject(e.target.value)}\n                placeholder=\"Enter announcement subject...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                value={announcementMessage}\n                onChange={(e) => setAnnouncementMessage(e.target.value)}\n                placeholder=\"Enter announcement message...\"\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAnnouncementModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={submitAnnouncement}\n              disabled={announcementMutation.isPending}\n            >\n              {announcementMutation.isPending ? \"Sending...\" : \"Send Announcement\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":28571},"client/src/pages/HomePage.tsx":{"content":"import { useState } from \"react\";\nimport { Search, MapPin, Plus, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/Navbar\";\nimport { EventCard } from \"@/components/EventCard\";\nimport { CategoryCard } from \"@/components/CategoryCard\";\nimport { CreateEventModal } from \"@/components/CreateEventModal\";\n\nexport default function HomePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [eventType, setEventType] = useState(\"\");\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const { data: events = [], isLoading: eventsLoading } = useQuery({\n    queryKey: [\"/api/events\", searchQuery, selectedCategory, eventType],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append('search', searchQuery);\n      if (selectedCategory && selectedCategory !== \"all\") params.append('category', selectedCategory);\n      if (eventType === \"paid\") params.append('isPaid', 'true');\n      if (eventType === \"free\") params.append('isPaid', 'false');\n      \n      const response = await fetch(`/api/events?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch events');\n      return response.json();\n    },\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const handleCategorySelect = (categoryId: string) => {\n    setSelectedCategory(categoryId === selectedCategory ? \"\" : categoryId);\n  };\n\n  const handleCalendarSync = async () => {\n    try {\n      const response = await fetch('/api/calendar/auth-url');\n      const data = await response.json();\n      if (data.authUrl) {\n        window.open(data.authUrl, '_blank');\n      }\n    } catch (error) {\n      console.error('Failed to get calendar auth URL:', error);\n    }\n  };\n\n  const heroStyle = {\n    backgroundImage: `linear-gradient(rgba(99, 102, 241, 0.7), rgba(139, 92, 246, 0.7)), url('https://images.unsplash.com/photo-1459749411175-04bf5292ceea?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=600')`,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n\n      {/* Hero Section */}\n      <section className=\"relative\">\n        <div \n          className=\"h-96 bg-cover bg-center relative\"\n          style={heroStyle}\n        >\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center text-white max-w-4xl mx-auto px-4\">\n              <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">\n                Discover Amazing Events\n              </h1>\n              <p className=\"text-xl md:text-2xl mb-8 opacity-90\">\n                Create, discover, and participate in local events and community gatherings\n              </p>\n              \n              {/* Search Bar */}\n              <div className=\"flex flex-col md:flex-row gap-4 max-w-2xl mx-auto\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search events...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full pl-10 pr-4 py-3 text-gray-900 placeholder-gray-500\"\n                  />\n                </div>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Location\"\n                    className=\"w-full md:w-48 pl-10 pr-4 py-3 text-gray-900 placeholder-gray-500\"\n                  />\n                </div>\n                <Button className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-8 py-3 font-semibold\">\n                  Search\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Actions */}\n      <section className=\"py-8 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            <Button \n              onClick={() => setShowCreateModal(true)}\n              className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90 text-white px-6 py-3 font-semibold\"\n            >\n              <Plus className=\"h-5 w-5\" />\n              <span>Create Event</span>\n            </Button>\n            <Button \n              onClick={handleCalendarSync}\n              className=\"flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-6 py-3 font-semibold\"\n            >\n              <Calendar className=\"h-5 w-5\" />\n              <span>Sync Calendar</span>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Event Categories */}\n      <section className=\"py-12 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center mb-8\">\n            Browse by Category\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {Array.isArray(categories) && categories.map((category: any) => (\n              <CategoryCard\n                key={category.id}\n                category={category}\n                eventCount={42} // Mock count\n                onClick={() => handleCategorySelect(category.id)}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Upcoming Events */}\n      <section className=\"py-12 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4 md:mb-0\">\n              Upcoming Events\n            </h2>\n            \n            {/* Filters */}\n            <div className=\"flex flex-wrap gap-2\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {Array.isArray(categories) && categories.map((category: any) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={eventType} onValueChange={setEventType}>\n                <SelectTrigger className=\"w-[120px]\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"free\">Free</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Event Cards Grid */}\n          {eventsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <div key={i} className=\"skeleton h-96 rounded-xl\"></div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {events?.map((event: any) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n          )}\n\n          {events && events.length === 0 && (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                No events found\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                Try adjusting your search criteria or create a new event.\n              </p>\n            </div>\n          )}\n\n          {/* Load More Button */}\n          {events && events.length > 0 && (\n            <div className=\"text-center mt-12\">\n              <Button variant=\"outline\" className=\"px-8 py-3 font-semibold\">\n                Load More Events\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Floating Action Button */}\n      <Button\n        onClick={() => setShowCreateModal(true)}\n        className=\"fixed bottom-6 right-6 bg-primary hover:bg-primary/90 text-white rounded-full p-4 shadow-lg hover:shadow-xl float-animation z-40\"\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n\n      {/* Create Event Modal */}\n      <CreateEventModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":9426},"client/src/pages/HostDashboard.tsx":{"content":"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from \"recharts\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Megaphone, Camera, TrendingUp, Users, DollarSign, MoreHorizontal, Edit, Trash2, Clock, Crown, Lightbulb, Music, Gamepad2, Coffee, Briefcase, Heart, GraduationCap, MapPin, Palette, Trophy } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/Navbar\";\nimport { CreateEventModal } from \"@/components/CreateEventModal\";\nimport { format } from \"date-fns\";\n\n// Helper function to generate chart data from real events\nconst generateChartData = (events: any[]) => {\n  if (!events || events.length === 0) {\n    return {\n      rsvpData: [],\n      eventPerformanceData: [],\n      recentRsvps: []\n    };\n  }\n\n  // Generate RSVP data based on real events\n  const rsvpData = events.slice(0, 4).map((event, index) => ({\n    name: `Week ${index + 1}`,\n    rsvps: event.attendingCount || 0\n  }));\n\n  // Generate performance data based on real events  \n  const eventPerformanceData = events.slice(0, 5).map((event, index) => ({\n    name: new Date(event.dateTime).toLocaleDateString('en', { month: 'short' }) || `Month ${index + 1}`,\n    events: 1,\n    attendance: Math.round((event.attendingCount / event.capacity) * 100) || 0\n  }));\n\n  return { rsvpData, eventPerformanceData, recentRsvps: [] };\n};\n\n// Category icon mapping\nconst getCategoryIcon = (category: any) => {\n  const categoryIconMap: { [key: string]: any } = {\n    'music': Music,\n    'gaming': Gamepad2,\n    'social': Coffee,\n    'professional': Briefcase,\n    'lifestyle': Heart,\n    'education': GraduationCap,\n    'travel': MapPin,\n    'art': Palette,\n    'sports': Trophy,\n  };\n  return categoryIconMap[category?.name?.toLowerCase()] || Heart;\n};\n\n// Category color mapping\nconst getCategoryColor = (category: any) => {\n  const categoryColorMap: { [key: string]: string } = {\n    'music': 'bg-purple-500',\n    'gaming': 'bg-green-500',\n    'social': 'bg-blue-500',\n    'professional': 'bg-gray-600',\n    'lifestyle': 'bg-pink-500',\n    'education': 'bg-indigo-500',\n    'travel': 'bg-orange-500',\n    'art': 'bg-yellow-500',\n    'sports': 'bg-red-500',\n  };\n  return categoryColorMap[category?.name?.toLowerCase()] || 'bg-blue-500';\n};\n\nexport default function HostDashboard() {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showAnnouncementModal, setShowAnnouncementModal] = useState(false);\n  const [showPhotoModal, setShowPhotoModal] = useState(false);\n  const [timeRange, setTimeRange] = useState(\"30\");\n  const [selectedEvent, setSelectedEvent] = useState(\"\");\n  const [announcementSubject, setAnnouncementSubject] = useState(\"\");\n  const [announcementMessage, setAnnouncementMessage] = useState(\"\");\n  const [photoUrl, setPhotoUrl] = useState(\"\");\n  const [photoCaption, setPhotoCaption] = useState(\"\");\n  const [selectedEventForAnnouncement, setSelectedEventForAnnouncement] = useState<string | null>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { data: hostedEvents = [] } = useQuery({\n    queryKey: [\"/api/my-hosted-events\"],\n    enabled: !!user,\n  });\n\n  const totalAttendees = Array.isArray(hostedEvents) ? hostedEvents.reduce((total: number, event: any) => total + (event.attendingCount || 0), 0) : 0;\n  const totalRevenue = Array.isArray(hostedEvents) ? hostedEvents.reduce((total: number, event: any) => total + (parseFloat(event.price || \"0\") * (event.attendingCount || 0)), 0) : 0;\n  const avgAttendanceRate = hostedEvents.length > 0 ? Math.round(hostedEvents.reduce((total: number, event: any) => total + ((event.attendingCount || 0) / (event.capacity || 1) * 100), 0) / hostedEvents.length) : 0;\n\n  // Generate chart data from real events\n  const { rsvpData, eventPerformanceData, recentRsvps } = generateChartData(hostedEvents);\n\n  // Event management handlers\n  const handleEditEvent = (eventId: string) => {\n    toast({\n      title: \"Edit Event\",\n      description: \"Edit functionality coming soon!\",\n    });\n  };\n\n  const handleSendAnnouncement = (eventId: string) => {\n    setSelectedEventForAnnouncement(eventId);\n    setShowAnnouncementModal(true);\n  };\n\n  const deleteEventMutation = useMutation({\n    mutationFn: (eventId: string) => apiRequest(\"DELETE\", `/api/events/${eventId}`),\n    onSuccess: () => {\n      toast({\n        title: \"Event Deleted\",\n        description: \"Your event has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-hosted-events\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteEvent = (eventId: string) => {\n    if (confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\n      deleteEventMutation.mutate(eventId);\n    }\n  };\n\n  const announcementMutation = useMutation({\n    mutationFn: (data: { eventId: string; subject: string; message: string }) =>\n      apiRequest(\"POST\", `/api/events/${data.eventId}/announcements`, {\n        subject: data.subject,\n        message: data.message,\n      }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Announcement Sent\",\n        description: `Announcement sent to ${data.recipientCount} attendees`,\n      });\n      setShowAnnouncementModal(false);\n      setAnnouncementSubject(\"\");\n      setAnnouncementMessage(\"\");\n      setSelectedEventForAnnouncement(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Send\",\n        description: \"Failed to send announcement. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitSelectedEventAnnouncement = () => {\n    if (!selectedEventForAnnouncement || !announcementSubject.trim() || !announcementMessage.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in both subject and message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    announcementMutation.mutate({\n      eventId: selectedEventForAnnouncement,\n      subject: announcementSubject,\n      message: announcementMessage,\n    });\n  };\n\n  const metrics = [\n    {\n      title: \"Attendance Rate\",\n      value: hostedEvents.length > 0 ? `${avgAttendanceRate}%` : \"0%\",\n      icon: TrendingUp,\n      color: \"text-primary\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n    },\n    {\n      title: \"Total Events\",\n      value: hostedEvents.length.toString(),\n      icon: Users,\n      color: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-100 dark:bg-green-900\",\n    },\n    {\n      title: \"Revenue\",\n      value: `$${totalRevenue.toFixed(2)}`,\n      icon: DollarSign,\n      color: \"text-yellow-600 dark:text-yellow-400\",\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center mb-8\">\n          Host Dashboard\n        </h1>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Event Analytics */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gray-50 dark:bg-gray-900\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    Event Analytics\n                  </CardTitle>\n                  <Select value={timeRange} onValueChange={setTimeRange}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7\">Last 7 days</SelectItem>\n                      <SelectItem value=\"30\">Last 30 days</SelectItem>\n                      <SelectItem value=\"90\">Last 90 days</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* RSVP Trends Chart */}\n                <Card className=\"bg-white dark:bg-gray-800 mb-6\">\n                  <CardHeader>\n                    <CardTitle className=\"font-semibold text-gray-900 dark:text-white\">\n                      RSVP Trends\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {rsvpData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height={250}>\n                        <LineChart data={rsvpData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"rsvps\" \n                            stroke=\"hsl(207, 90%, 54%)\" \n                            strokeWidth={2}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"h-[250px] flex items-center justify-center text-gray-500 dark:text-gray-400\">\n                        <div className=\"text-center\">\n                          <Users className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                          <p className=\"text-lg font-medium\">No RSVP data yet</p>\n                          <p className=\"text-sm\">Create your first event to see analytics</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Event Performance Metrics */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {metrics.map((metric, index) => (\n                    <Card key={index} className=\"bg-white dark:bg-gray-800 text-center\">\n                      <CardContent className=\"p-4\">\n                        <div className={`inline-flex items-center justify-center w-12 h-12 ${metric.bgColor} rounded-full mb-2`}>\n                          <metric.icon className={`h-6 w-6 ${metric.color}`} />\n                        </div>\n                        <div className={`text-2xl font-bold ${metric.color}`}>\n                          {metric.value}\n                        </div>\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {metric.title}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Event Performance Chart */}\n            <Card className=\"bg-white dark:bg-gray-800 mt-6\">\n              <CardHeader>\n                <CardTitle className=\"font-semibold text-gray-900 dark:text-white\">\n                  Monthly Event Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {eventPerformanceData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={eventPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"events\" fill=\"hsl(207, 90%, 54%)\" />\n                      <Bar dataKey=\"attendance\" fill=\"hsl(151, 55%, 42%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-gray-500 dark:text-gray-400\">\n                    <div className=\"text-center\">\n                      <TrendingUp className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                      <p className=\"text-lg font-medium\">No performance data</p>\n                      <p className=\"text-sm\">Host events to view monthly performance analytics</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div>\n            <Card className=\"bg-gray-50 dark:bg-gray-900\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={() => setShowCreateModal(true)}\n                    className=\"w-full bg-primary hover:bg-primary/90 text-white p-3 font-semibold flex items-center justify-center\"\n                  >\n                    <Plus className=\"h-5 w-5 mr-2\" />\n                    Create New Event\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setShowAnnouncementModal(true)}\n                    disabled={hostedEvents.length === 0}\n                    className=\"w-full p-3 font-semibold flex items-center justify-center\"\n                  >\n                    <Megaphone className=\"h-5 w-5 mr-2\" />\n                    Send Announcement\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setShowPhotoModal(true)}\n                    disabled={hostedEvents.length === 0}\n                    className=\"w-full p-3 font-semibold flex items-center justify-center\"\n                  >\n                    <Camera className=\"h-5 w-5 mr-2\" />\n                    Upload Photos\n                  </Button>\n                </div>\n\n                {/* My Created Events */}\n                <div className=\"mt-6\">\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-3\">\n                    My Created Events ({hostedEvents.length})\n                  </h4>\n                  {hostedEvents.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {hostedEvents.slice(0, 4).map((event: any) => (\n                        <div key={event.id} className=\"flex items-center justify-between p-3 bg-white dark:bg-gray-800 rounded-lg border\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`${getCategoryColor(event.category)} rounded-lg p-2`}>\n                              {(() => {\n                                const IconComponent = getCategoryIcon(event.category);\n                                return <IconComponent className=\"h-4 w-4 text-white\" />;\n                              })()}\n                            </div>\n                            <div>\n                              <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                {event.title}\n                              </span>\n                              <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 space-x-2\">\n                                <span className=\"flex items-center\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  {format(new Date(event.dateTime), \"MMM dd\")}\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <Users className=\"h-3 w-3 mr-1\" />\n                                  {event.attendeeCount || 0}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onClick={() => handleEditEvent(event.id)}>\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => handleSendAnnouncement(event.id)}>\n                                <Megaphone className=\"mr-2 h-4 w-4\" />\n                                Announce\n                              </DropdownMenuItem>\n                              <DropdownMenuSeparator />\n                              <DropdownMenuItem onClick={() => handleDeleteEvent(event.id)} className=\"text-red-600\">\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      <Crown className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                      <p className=\"text-sm\">No events created yet</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Host Tips */}\n                <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <h5 className=\"font-semibold text-blue-900 dark:text-blue-300 mb-2\">\n                    💡 Host Tip\n                  </h5>\n                  <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                    Send event reminders 24 hours before to improve attendance rates!\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Event Modal */}\n      <CreateEventModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n      />\n\n      {/* Announcement Modal - Updated for direct event selection */}\n      <Dialog open={showAnnouncementModal} onOpenChange={setShowAnnouncementModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Send Announcement</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {selectedEventForAnnouncement && (\n              <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                  Sending to: <span className=\"font-semibold\">\n                    {hostedEvents.find(e => e.id === selectedEventForAnnouncement)?.title}\n                  </span>\n                </p>\n              </div>\n            )}\n            <div>\n              <Label htmlFor=\"subject\">Subject</Label>\n              <Input\n                id=\"subject\"\n                value={announcementSubject}\n                onChange={(e) => setAnnouncementSubject(e.target.value)}\n                placeholder=\"Enter announcement subject...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                value={announcementMessage}\n                onChange={(e) => setAnnouncementMessage(e.target.value)}\n                rows={4}\n                placeholder=\"Enter your announcement message...\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAnnouncementModal(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={submitSelectedEventAnnouncement}\n              disabled={!announcementSubject.trim() || !announcementMessage.trim() || announcementMutation.isPending}\n            >\n              {announcementMutation.isPending ? \"Sending...\" : \"Send Announcement\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Photo Upload Modal */}\n      <Dialog open={showPhotoModal} onOpenChange={setShowPhotoModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Upload Event Photo</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"photo-event-select\">Select Event</Label>\n              <Select value={selectedEvent} onValueChange={setSelectedEvent}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose an event\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {hostedEvents.map((event: any) => (\n                    <SelectItem key={event.id} value={event.id}>\n                      {event.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"photo-url\">Photo URL</Label>\n              <Input\n                id=\"photo-url\"\n                value={photoUrl}\n                onChange={(e) => setPhotoUrl(e.target.value)}\n                placeholder=\"https://example.com/photo.jpg\"\n              />\n              <div className=\"text-sm text-gray-500 mt-1\">\n                Upload your photo to a service like ImgBB or Imgur first\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"photo-caption\">Caption (optional)</Label>\n              <Input\n                id=\"photo-caption\"\n                value={photoCaption}\n                onChange={(e) => setPhotoCaption(e.target.value)}\n                placeholder=\"Photo caption...\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowPhotoModal(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button \n                onClick={async () => {\n                  if (!selectedEvent || !photoUrl) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please select an event and provide a photo URL\",\n                      variant: \"destructive\"\n                    });\n                    return;\n                  }\n                  \n                  try {\n                    await apiRequest(\"POST\", `/api/events/${selectedEvent}/photos`, {\n                      url: photoUrl,\n                      caption: photoCaption\n                    });\n                    \n                    toast({\n                      title: \"Success\",\n                      description: \"Photo uploaded successfully\"\n                    });\n                    \n                    setShowPhotoModal(false);\n                    setSelectedEvent(\"\");\n                    setPhotoUrl(\"\");\n                    setPhotoCaption(\"\");\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to upload photo\",\n                      variant: \"destructive\"\n                    });\n                  }\n                }}\n                className=\"flex-1\"\n              >\n                Upload Photo\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":24810},"client/src/pages/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Users, Star, ArrowRight, Music, Code, Palette, Trophy, GraduationCap, Utensils, Eye } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\n\nexport default function LandingPage() {\n  const { signInWithGoogle } = useAuth();\n  \n  // Add cursor tracking for glow effect\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent) => {\n      const root = document.documentElement;\n      root.style.setProperty('--mouse-x', `${e.clientX}px`);\n      root.style.setProperty('--mouse-y', `${e.clientY}px`);\n    };\n\n    document.addEventListener('mousemove', updateMousePosition);\n    return () => document.removeEventListener('mousemove', updateMousePosition);\n  }, []);\n  \n  const handleSignIn = () => {\n    signInWithGoogle();\n  };\n  \n  const handleBrowseAsGuest = () => {\n    // Navigate to the main app without authentication\n    window.location.href = '/browse';\n  };\n\n  const features = [\n    {\n      icon: Calendar,\n      title: \"Easy Event Creation\",\n      description: \"Create and manage events with our intuitive interface\"\n    },\n    {\n      icon: Users,\n      title: \"RSVP Management\",\n      description: \"Track attendees and manage capacity effortlessly\"\n    },\n    {\n      icon: MapPin,\n      title: \"Location Discovery\",\n      description: \"Find events happening near you\"\n    },\n    {\n      icon: Star,\n      title: \"Reviews & Ratings\",\n      description: \"Rate events and read reviews from other attendees\"\n    }\n  ];\n\n  const categories = [\n    { icon: Music, name: \"Music\", color: \"bg-blue-100 text-blue-700\" },\n    { icon: Code, name: \"Technology\", color: \"bg-green-100 text-green-700\" },\n    { icon: Palette, name: \"Art\", color: \"bg-purple-100 text-purple-700\" },\n    { icon: Trophy, name: \"Sports\", color: \"bg-red-100 text-red-700\" },\n    { icon: GraduationCap, name: \"Education\", color: \"bg-indigo-100 text-indigo-700\" },\n    { icon: Utensils, name: \"Food\", color: \"bg-yellow-100 text-yellow-700\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100 dark:bg-gradient-to-br dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 relative overflow-hidden cursor-glow\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Grid Pattern */}\n        <div className=\"absolute inset-0 bg-tech-grid opacity-20 animate-pulse-slow\"></div>\n        \n        {/* Electric Clouds */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-20 w-32 h-20 bg-gradient-to-r from-blue-400/30 to-purple-400/30 animate-electric-cloud-1\"></div>\n          <div className=\"absolute top-40 right-32 w-28 h-16 bg-gradient-to-r from-purple-400/25 to-cyan-400/25 animate-electric-cloud-2\"></div>\n          <div className=\"absolute bottom-32 left-40 w-36 h-24 bg-gradient-to-r from-cyan-400/35 to-blue-400/35 animate-electric-cloud-3\"></div>\n          <div className=\"absolute bottom-48 right-20 w-24 h-14 bg-gradient-to-r from-green-400/30 to-purple-400/30 animate-electric-cloud-1\"></div>\n          <div className=\"absolute top-60 left-1/3 w-20 h-12 bg-gradient-to-r from-pink-400/25 to-blue-400/25 animate-electric-cloud-2\"></div>\n        </div>\n        \n        {/* Circuit Lines */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 1200 800\">\n            <path\n              d=\"M0 200 L300 200 L400 100 L800 100 L900 300 L1200 300\"\n              stroke=\"url(#circuit-gradient)\"\n              strokeWidth=\"2\"\n              fill=\"none\"\n              className=\"animate-circuit-flow\"\n            />\n            <path\n              d=\"M0 600 L200 600 L300 500 L600 500 L700 700 L1200 700\"\n              stroke=\"url(#circuit-gradient)\"\n              strokeWidth=\"2\"\n              fill=\"none\"\n              className=\"animate-circuit-flow-reverse\"\n            />\n            <defs>\n              <linearGradient id=\"circuit-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.8\"/>\n                <stop offset=\"50%\" stopColor=\"#8b5cf6\" stopOpacity=\"0.8\"/>\n                <stop offset=\"100%\" stopColor=\"#06b6d4\" stopOpacity=\"0.8\"/>\n              </linearGradient>\n            </defs>\n          </svg>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"relative z-10 min-h-screen flex items-center\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-32\">\n          <div className=\"text-center\">\n            <h1 className=\"text-6xl md:text-7xl lg:text-8xl font-bold text-gray-900 dark:text-white mb-8 leading-tight\">\n              <span className=\"inline-block animate-glow-text text-gray-800 dark:text-gray-100\">Next-Gen</span>\n              <span className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-cyan-600 bg-clip-text text-transparent block animate-gradient-shift\">\n                Event Platform\n              </span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-700 dark:text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed font-medium\">\n              Experience the future of event management. Create, discover, and join events with cutting-edge technology and seamless user experience.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n              <Button \n                onClick={handleSignIn}\n                size=\"lg\" \n                className=\"group text-lg px-10 py-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 border border-blue-500/30 shadow-2xl hover:shadow-blue-500/25 transform hover:-translate-y-1 transition-all duration-300 backdrop-blur-sm\"\n              >\n                <svg className=\"w-5 h-5 mr-3 group-hover:rotate-12 transition-transform\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Sign In with Google\n                <ArrowRight className=\"ml-3 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n              \n              <Button \n                onClick={handleBrowseAsGuest}\n                variant=\"outline\" \n                size=\"lg\" \n                className=\"text-lg px-10 py-6 border-2 border-gray-600/50 text-gray-300 hover:bg-gray-800/50 hover:border-gray-500 transition-all duration-300 backdrop-blur-sm\"\n              >\n                <Eye className=\"mr-3 h-5 w-5\" />\n                Browse as Guest\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/browse'}\n                variant=\"ghost\" \n                size=\"lg\" \n                className=\"text-lg px-10 py-6 text-blue-400 hover:text-blue-300 hover:bg-blue-900/20 transition-all duration-300 backdrop-blur-sm\"\n              >\n                Explore Demo\n                <ArrowRight className=\"ml-3 h-5 w-5\" />\n              </Button>\n            </div>\n            \n            {/* Tech Stats */}\n            <div className=\"mt-16 grid grid-cols-1 sm:grid-cols-3 gap-8 max-w-3xl mx-auto\">\n              <div className=\"text-center p-6 rounded-xl bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border border-gray-200 dark:border-gray-700 glow\">\n                <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2\">99.9%</div>\n                <div className=\"text-gray-700 dark:text-gray-300 font-medium\">Uptime</div>\n              </div>\n              <div className=\"text-center p-6 rounded-xl bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border border-gray-200 dark:border-gray-700 glow-purple\">\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">&lt;50ms</div>\n                <div className=\"text-gray-700 dark:text-gray-300 font-medium\">Response Time</div>\n              </div>\n              <div className=\"text-center p-6 rounded-xl bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border border-gray-200 dark:border-gray-700 glow-green\">\n                <div className=\"text-3xl font-bold text-green-600 dark:text-green-400 mb-2\">10K+</div>\n                <div className=\"text-gray-700 dark:text-gray-300 font-medium\">Active Users</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div id=\"features\" className=\"py-32 bg-white dark:bg-gray-950 relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-950/20 via-purple-950/20 to-cyan-950/20\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Advanced Features\n              </span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Cutting-edge technology stack powering the next generation of event management\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card \n                  key={index} \n                  className=\"text-center border border-gray-700/50 bg-gray-900/30 backdrop-blur-sm hover:bg-gray-800/50 transition-all duration-300 transform hover:-translate-y-2 hover:shadow-2xl hover:shadow-blue-500/20 group\"\n                >\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300 shadow-lg shadow-blue-500/30\">\n                      <IconComponent className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <CardTitle className=\"text-xl font-semibold text-white group-hover:text-blue-300 transition-colors\">\n                      {feature.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-gray-300 leading-relaxed\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Categories Section */}\n      <div className=\"py-32 bg-gray-100 dark:bg-black relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900/50 dark:from-blue-900/30 to-black dark:to-purple-900/20\"></div>\n        \n        {/* Additional tech elements for dark mode */}\n        <div className=\"absolute inset-0 hidden dark:block\">\n          <div className=\"absolute top-1/4 left-1/4 w-32 h-32 border border-cyan-500/20 rounded-full animate-spin-slow\"></div>\n          <div className=\"absolute bottom-1/3 right-1/4 w-48 h-48 border border-purple-500/20 rounded-lg rotate-45 animate-pulse\"></div>\n          <div className=\"absolute top-1/2 right-1/3 w-24 h-24 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-full animate-bounce-slow\"></div>\n        </div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent\">\n                Event Universe\n              </span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Explore infinite possibilities across diverse digital communities and tech-driven experiences\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8\">\n            {categories.map((category, index) => {\n              const IconComponent = category.icon;\n              const colors = [\n                'from-blue-500 to-cyan-500',\n                'from-green-500 to-emerald-500', \n                'from-purple-500 to-pink-500',\n                'from-red-500 to-orange-500',\n                'from-indigo-500 to-blue-500',\n                'from-yellow-500 to-orange-500'\n              ];\n              return (\n                <div key={index} className=\"text-center group\">\n                  <div className={`mx-auto w-20 h-20 bg-gradient-to-br ${colors[index % colors.length]} rounded-2xl flex items-center justify-center mb-4 hover:scale-110 hover:rotate-6 transition-all duration-300 cursor-pointer shadow-lg shadow-blue-500/20 group-hover:shadow-2xl group-hover:shadow-blue-500/40`}>\n                    <IconComponent className=\"h-10 w-10 text-white\" />\n                  </div>\n                  <p className=\"font-semibold text-white group-hover:text-cyan-400 transition-colors\">\n                    {category.name}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-32 bg-gradient-to-r from-gray-900 via-blue-900 to-purple-900 relative overflow-hidden\">\n        {/* Animated Background Elements */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n          <div className=\"absolute top-3/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse-slow delay-1000\"></div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <h2 className=\"text-4xl md:text-6xl font-bold text-white mb-8 leading-tight\">\n            <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n              Ready to Launch?\n            </span>\n          </h2>\n          <p className=\"text-xl md:text-2xl text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed\">\n            Join the next generation of event creators and participants. Experience the future today.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n            <Button \n              onClick={handleSignIn}\n              size=\"lg\" \n              className=\"group text-lg px-10 py-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 border border-blue-500/30 shadow-2xl hover:shadow-blue-500/25 transform hover:-translate-y-1 transition-all duration-300\"\n            >\n              <svg className=\"w-5 h-5 mr-3 group-hover:rotate-12 transition-transform\" viewBox=\"0 0 24 24\">\n                <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Initialize Platform\n              <ArrowRight className=\"ml-3 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n            </Button>\n            \n            <Button \n              onClick={handleBrowseAsGuest}\n              variant=\"outline\" \n              size=\"lg\" \n              className=\"text-lg px-10 py-6 border-2 border-gray-600/50 text-gray-300 hover:bg-gray-800/50 hover:border-gray-500 transition-all duration-300 backdrop-blur-sm\"\n            >\n              <Eye className=\"mr-3 h-5 w-5\" />\n              Explore Demo\n            </Button>\n          </div>\n          \n          <div className=\"mt-12 flex items-center justify-center gap-2 text-gray-400\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm\">Secure • Fast • Future-Ready</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17489},"client/src/pages/PastEventsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Star, Calendar, MapPin, Users, Camera, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/Navbar\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\n\ninterface PastEventCardProps {\n  event: any;\n  userRsvp: any;\n}\n\nfunction PastEventCard({ event, userRsvp }: PastEventCardProps) {\n  const [showReviewModal, setShowReviewModal] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: eventDetails } = useQuery({\n    queryKey: [\"/api/events\", event.id],\n    enabled: !!event.id,\n  });\n\n  const submitReviewMutation = useMutation({\n    mutationFn: async (reviewData: { rating: number; comment: string }) => {\n      return apiRequest(\"POST\", `/api/events/${event.id}/reviews`, reviewData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/events/${event.id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setShowReviewModal(false);\n      setRating(0);\n      setComment(\"\");\n      toast({\n        title: \"Review Submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Review submission error:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitReview = () => {\n    if (rating === 0) {\n      toast({\n        title: \"Rating Required\",\n        description: \"Please select a rating before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitReviewMutation.mutate({ rating, comment });\n  };\n\n  // Favorite functionality for past events\n  const { data: favoriteData } = useQuery({\n    queryKey: [`/api/events/${event.id}/favorite`],\n    enabled: !!event.id,\n  });\n\n  const isLiked = favoriteData?.favorited || false;\n\n  const favoriteMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", `/api/events/${event.id}/favorite`, {});\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/events/${event.id}/favorite`] });\n      toast({\n        title: data.favorited ? \"Added to Favorites\" : \"Removed from Favorites\",\n        description: data.message,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Favorite toggle error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorite. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categoryColor = event.category?.color || \"blue\";\n  const categoryColorMap: Record<string, string> = {\n    blue: \"bg-blue-600\",\n    green: \"bg-green-600\",\n    purple: \"bg-purple-600\",\n    red: \"bg-red-600\",\n    yellow: \"bg-yellow-600\",\n    indigo: \"bg-indigo-600\",\n  };\n\n  const eventDate = new Date(event.dateTime);\n  const bgColor = categoryColorMap[categoryColor] || \"bg-gray-600\";\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden\">\n      {/* Event Image */}\n      <div \n        className=\"h-48 bg-cover bg-center relative\"\n        style={{\n          backgroundImage: event.imageUrl \n            ? `url(${event.imageUrl})` \n            : \"linear-gradient(135deg, rgb(99, 102, 241), rgb(139, 92, 246))\",\n        }}\n      >\n        <div className=\"h-full bg-black bg-opacity-40 flex items-end\">\n          <div className=\"p-6 text-white\">\n            <h3 className=\"text-xl font-bold mb-2\">{event.title}</h3>\n            <p className=\"text-sm opacity-90\">\n              Completed • {format(eventDate, \"MMM dd, yyyy\")}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-1\">\n            {eventDetails?.averageRating ? (\n              <>\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-4 w-4 ${\n                      star <= Math.round(eventDetails.averageRating)\n                        ? \"text-yellow-400 fill-current\"\n                        : \"text-gray-300 dark:text-gray-600\"\n                    }`}\n                  />\n                ))}\n                <span className=\"ml-2 text-sm text-gray-600 dark:text-gray-400\">\n                  {eventDetails.averageRating.toFixed(1)} ({eventDetails.reviews?.length || 0} reviews)\n                </span>\n              </>\n            ) : (\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">No ratings yet</span>\n            )}\n          </div>\n          <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n            {eventDetails?.attendingCount || 0} attended\n          </span>\n        </div>\n        \n        {/* Event Photos */}\n        {eventDetails?.photos && eventDetails.photos.length > 0 && (\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            {eventDetails.photos.slice(0, 3).map((photo: any, index: number) => (\n              <img\n                key={photo.id}\n                src={photo.url}\n                alt={photo.caption || `Event photo ${index + 1}`}\n                className=\"h-20 w-full object-cover rounded\"\n              />\n            ))}\n          </div>\n        )}\n        \n        {/* Sample Event Review */}\n        {eventDetails?.reviews && eventDetails.reviews.length > 0 && (\n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4\">\n            <div className=\"flex items-center mb-2\">\n              <div className=\"flex items-center space-x-1\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-3 w-3 ${\n                      star <= eventDetails.reviews[0].rating\n                        ? \"text-yellow-400 fill-current\"\n                        : \"text-gray-300 dark:text-gray-600\"\n                    }`}\n                  />\n                ))}\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300 italic\">\n              \"{eventDetails.reviews[0].comment || \"Great event!\"}\"\n            </p>\n            <div className=\"flex items-center mt-2\">\n              <Avatar className=\"h-5 w-5 mr-2\">\n                <AvatarImage src=\"https://i.pravatar.cc/100?img=1\" alt=\"Reviewer\" />\n                <AvatarFallback>U</AvatarFallback>\n              </Avatar>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\">Anonymous</span>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Dialog open={showReviewModal} onOpenChange={setShowReviewModal}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"flex-1\">\n                <Star className=\"h-4 w-4 mr-2\" />\n                Rate & Review\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Rate & Review Event</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Your Rating</Label>\n                  <div className=\"flex items-center space-x-1 mt-2\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`h-6 w-6 cursor-pointer transition-colors ${\n                          star <= rating\n                            ? \"text-yellow-400 fill-current\"\n                            : \"text-gray-300 dark:text-gray-600 hover:text-yellow-300\"\n                        }`}\n                        onClick={() => setRating(star)}\n                      />\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"comment\">Your Review (Optional)</Label>\n                  <Textarea\n                    id=\"comment\"\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value)}\n                    placeholder=\"Share your experience...\"\n                    className=\"mt-2\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowReviewModal(false)} className=\"flex-1\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleSubmitReview}\n                    disabled={submitReviewMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {submitReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Button variant=\"outline\" size=\"icon\">\n            <Camera className=\"h-4 w-4\" />\n          </Button>\n          \n          <Button \n            variant=\"outline\" \n            size=\"icon\"\n            onClick={() => favoriteMutation.mutate()}\n            disabled={favoriteMutation.isPending}\n            className={`transition-all duration-200 ${\n              isLiked \n                ? \"text-red-500 hover:text-red-600 scale-110\" \n                : \"text-gray-600 dark:text-gray-400 hover:text-red-500 hover:scale-105\"\n            }`}\n          >\n            <Heart className={`h-4 w-4 transition-all duration-200 ${isLiked ? \"fill-current text-red-500\" : \"\"}`} />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function PastEventsPage() {\n  const { user } = useAuth(); // Import and use auth hook\n  const { data: userRsvps = [] } = useQuery({\n    queryKey: [\"/api/my-rsvps\"], // Use authenticated endpoint\n    enabled: !!user,\n  });\n\n  const pastEvents = userRsvps?.filter((rsvp: any) => \n    rsvp.event && new Date(rsvp.event.dateTime) < new Date() && rsvp.status === \"attending\"\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Past Events\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Rate and review the events you've attended\n          </p>\n        </div>\n        \n        {pastEvents.length === 0 ? (\n          <Card className=\"bg-white dark:bg-gray-800 text-center py-12\">\n            <CardContent>\n              <Calendar className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                No Past Events\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                You haven't attended any events yet. Start exploring events to build your history!\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {pastEvents.map((rsvp: any) => (\n              <PastEventCard\n                key={rsvp.id}\n                event={rsvp.event}\n                userRsvp={rsvp}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Event Statistics */}\n        {pastEvents.length > 0 && (\n          <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"bg-white dark:bg-gray-800 text-center\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">\n                  {pastEvents.length}\n                </div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  Events Attended\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-white dark:bg-gray-800 text-center\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-green-600 dark:text-green-400 mb-2\">\n                  {pastEvents.filter((rsvp: any) => rsvp.event.category?.name === \"Tech\").length}\n                </div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  Tech Events\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-white dark:bg-gray-800 text-center\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">\n                  {pastEvents.filter((rsvp: any) => !rsvp.event.isPaid).length}\n                </div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  Free Events\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13917},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"attached_assets/content-1754401342805.md":{"content":"# Sign in\n\nto continue to Gmail\n\nEmail or phone\n\nForgot email?\n\nType the text you hear or see\n\nNot your computer? Use Guest mode to sign in privately. [Learn more about using Guest mode](https://support.google.com/chrome/answer/6130773?hl=en-US)\n\nNext\n\nCreate account\n\n- For my personal use\n- For my child\n- For work or my business","size_bytes":331},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, events, eventCategories, rsvps } from \"@shared/schema\";\n\nasync function seedDatabase() {\n  try {\n    console.log(\"🌱 Starting database seeding...\");\n\n    // Clear existing data\n    await db.delete(rsvps);\n    await db.delete(events);\n    await db.delete(users);\n    await db.delete(eventCategories);\n\n    // Insert categories\n    const categories = [\n      { id: \"cat-1\", name: \"Music\", icon: \"Music\", color: \"blue\" },\n      { id: \"cat-2\", name: \"Tech\", icon: \"Laptop\", color: \"green\" },\n      { id: \"cat-3\", name: \"Art\", icon: \"Palette\", color: \"purple\" },\n      { id: \"cat-4\", name: \"Sports\", icon: \"Trophy\", color: \"red\" },\n      { id: \"cat-5\", name: \"Food\", icon: \"Utensils\", color: \"yellow\" },\n      { id: \"cat-6\", name: \"Education\", icon: \"GraduationCap\", color: \"indigo\" },\n    ];\n\n    await db.insert(eventCategories).values(categories);\n    console.log(\"✅ Categories seeded\");\n\n    // Insert sample users\n    const sampleUsers = [\n      {\n        id: \"user-1\",\n        email: \"john@example.com\",\n        name: \"John Doe\",\n        avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\",\n        googleId: null,\n      },\n      {\n        id: \"user-2\", \n        email: \"sarah@example.com\",\n        name: \"Sarah Chen\",\n        avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b47c?w=100&h=100&fit=crop&crop=face\",\n        googleId: null,\n      },\n      {\n        id: \"user-3\",\n        email: \"mike@example.com\", \n        name: \"Mike Rodriguez\",\n        avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n        googleId: null,\n      }\n    ];\n\n    await db.insert(users).values(sampleUsers);\n    console.log(\"✅ Users seeded\");\n\n    // Insert sample events\n    const sampleEvents = [\n      {\n        id: \"event-1\",\n        title: \"React Workshop 2024\",\n        description: \"Learn modern React development with hooks, context, and best practices. Perfect for developers looking to level up their skills.\",\n        categoryId: \"cat-2\",\n        hostId: \"user-1\", \n        location: \"Tech Hub Downtown, Room 301\",\n        dateTime: new Date(\"2024-12-20T14:00:00Z\"),\n        capacity: 50,\n        price: \"49.99\",\n        isPaid: true,\n        tags: [\"react\", \"javascript\", \"frontend\"],\n        imageUrl: \"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      },\n      {\n        id: \"event-2\",\n        title: \"Local Art Exhibition\",\n        description: \"Discover amazing works from emerging local artists. A celebration of creativity and community expression.\",\n        categoryId: \"cat-3\",\n        hostId: \"user-2\",\n        location: \"City Art Gallery, Main Hall\",\n        dateTime: new Date(\"2024-12-22T18:00:00Z\"),\n        capacity: 100,\n        price: \"0.00\", \n        isPaid: false,\n        tags: [\"art\", \"community\", \"exhibition\"],\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      },\n      {\n        id: \"event-3\",\n        title: \"Indie Music Night\",\n        description: \"An evening of live indie music featuring local bands and special guest performers. Food and drinks available.\",\n        categoryId: \"cat-1\",\n        hostId: \"user-3\",\n        location: \"Riverside Park Amphitheater\",\n        dateTime: new Date(\"2024-12-25T19:30:00Z\"),\n        capacity: 200,\n        price: \"25.00\",\n        isPaid: true,\n        tags: [\"music\", \"live\", \"indie\"],\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      },\n      {\n        id: \"event-4\",\n        title: \"Basketball Tournament\",\n        description: \"Join us for an exciting 3v3 basketball tournament. All skill levels welcome. Prizes for winners!\",\n        categoryId: \"cat-4\",\n        hostId: \"user-1\",\n        location: \"Community Sports Center\",\n        dateTime: new Date(\"2024-12-28T10:00:00Z\"),\n        capacity: 24,\n        price: \"15.00\",\n        isPaid: true,\n        tags: [\"basketball\", \"tournament\", \"sports\"],\n        imageUrl: \"https://images.unsplash.com/photo-1546519638-68e109498ffc?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      },\n      {\n        id: \"event-5\",\n        title: \"Food Truck Festival\",\n        description: \"Sample delicious food from local food trucks. Live music, family activities, and great eats!\",\n        categoryId: \"cat-5\",\n        hostId: \"user-2\",\n        location: \"Central Park\",\n        dateTime: new Date(\"2024-12-30T12:00:00Z\"),\n        capacity: 500,\n        price: \"0.00\",\n        isPaid: false,\n        tags: [\"food\", \"festival\", \"family\"],\n        imageUrl: \"https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      },\n      {\n        id: \"event-6\",\n        title: \"Python for Beginners\",\n        description: \"Learn Python programming from scratch. No prior experience required. Laptops provided.\",\n        categoryId: \"cat-6\",\n        hostId: \"user-3\",\n        location: \"Library Learning Center\",\n        dateTime: new Date(\"2025-01-05T09:00:00Z\"),\n        capacity: 30,\n        price: \"39.99\",\n        isPaid: true,\n        tags: [\"python\", \"programming\", \"beginners\"],\n        imageUrl: \"https://images.unsplash.com/photo-1526379095098-d400fd0bf935?w=800&h=400&fit=crop\",\n        status: \"upcoming\",\n      }\n    ];\n\n    await db.insert(events).values(sampleEvents);\n    console.log(\"✅ Events seeded\");\n\n    // Insert sample RSVPs\n    const sampleRsvps = [\n      { id: \"rsvp-1\", eventId: \"event-1\", userId: \"user-2\", status: \"attending\" },\n      { id: \"rsvp-2\", eventId: \"event-1\", userId: \"user-3\", status: \"attending\" },\n      { id: \"rsvp-3\", eventId: \"event-2\", userId: \"user-1\", status: \"attending\" },\n      { id: \"rsvp-4\", eventId: \"event-2\", userId: \"user-3\", status: \"maybe\" },\n      { id: \"rsvp-5\", eventId: \"event-3\", userId: \"user-1\", status: \"attending\" },\n      { id: \"rsvp-6\", eventId: \"event-3\", userId: \"user-2\", status: \"attending\" },\n      { id: \"rsvp-7\", eventId: \"event-4\", userId: \"user-2\", status: \"attending\" },\n      { id: \"rsvp-8\", eventId: \"event-5\", userId: \"user-1\", status: \"attending\" },\n      { id: \"rsvp-9\", eventId: \"event-5\", userId: \"user-3\", status: \"attending\" },\n      { id: \"rsvp-10\", eventId: \"event-6\", userId: \"user-2\", status: \"maybe\" },\n    ];\n\n    await db.insert(rsvps).values(sampleRsvps);\n    console.log(\"✅ RSVPs seeded\");\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nif (process.argv[1] === __filename) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}\n\nexport { seedDatabase };","size_bytes":7083},"client/src/pages/BrowsePage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, MapPin, Users, Search, Filter, Eye, Clock, Star } from \"lucide-react\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string;\n  startDateTime: string;\n  endDateTime: string;\n  location: string;\n  capacity: number;\n  isPaid: boolean;\n  price: number | null;\n  category: {\n    id: string;\n    name: string;\n    icon: string;\n    color: string;\n  };\n  attendingCount: number;\n  averageRating?: number;\n}\n\nexport default function BrowsePage() {\n  const { theme, toggleTheme } = useTheme();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [eventType, setEventType] = useState(\"all\");\n\n  // Fetch events (will work without authentication for browsing)\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: [\"/api/events\", { search: searchQuery, category: selectedCategory === \"all\" ? undefined : selectedCategory }],\n    enabled: true,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    enabled: true,\n  });\n\n  const filteredEvents = (events as Event[]).filter((event: Event) => {\n    if (eventType === \"free\" && event.isPaid) return false;\n    if (eventType === \"paid\" && !event.isPaid) return false;\n    return true;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-300\">Loading events...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black relative\">\n      {/* Subtle animated background */}\n      <div className=\"absolute inset-0 bg-tech-grid opacity-10 animate-pulse-slow\"></div>\n      \n      {/* Header */}\n      <div className=\"relative z-10 bg-gradient-to-r from-gray-900 to-black border-b border-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-white mb-2\">\n                <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  Browse Events\n                </span>\n              </h1>\n              <p className=\"text-gray-300\">Discover amazing events happening around you</p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                onClick={toggleTheme} \n                className=\"border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                {theme === \"light\" ? \"🌙\" : \"☀️\"}\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/'}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500\"\n              >\n                <Eye className=\"mr-2 h-4 w-4\" />\n                Sign In to Join\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"md:col-span-2 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search events...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 bg-gray-900/50 border-gray-700 text-white placeholder-gray-400\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"bg-gray-900/50 border-gray-700 text-white\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-900 border-gray-700\">\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {(categories as any[]).map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={eventType} onValueChange={setEventType}>\n              <SelectTrigger className=\"bg-gray-900/50 border-gray-700 text-white\">\n                <SelectValue placeholder=\"Event Type\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-900 border-gray-700\">\n                <SelectItem value=\"all\">All Events</SelectItem>\n                <SelectItem value=\"free\">Free Events</SelectItem>\n                <SelectItem value=\"paid\">Paid Events</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      {/* Events Grid */}\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {filteredEvents.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Calendar className=\"h-12 w-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-white mb-2\">No events found</h3>\n            <p className=\"text-gray-400\">Try adjusting your search criteria</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredEvents.map((event: Event) => (\n              <Card \n                key={event.id} \n                className=\"bg-gray-900/30 border-gray-700 hover:bg-gray-800/50 transition-all duration-300 backdrop-blur-sm group hover:border-blue-500/50\"\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <Badge \n                      variant=\"secondary\" \n                      className=\"bg-blue-500/20 text-blue-300 border-blue-500/30\"\n                    >\n                      {event.category.name}\n                    </Badge>\n                    {event.isPaid ? (\n                      <Badge className=\"bg-green-500/20 text-green-300 border-green-500/30\">\n                        ${event.price}\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n                        Free\n                      </Badge>\n                    )}\n                  </div>\n                  <CardTitle className=\"text-white group-hover:text-blue-300 transition-colors\">\n                    {event.title}\n                  </CardTitle>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <CardDescription className=\"text-gray-300\">\n                    {event.description}\n                  </CardDescription>\n                  \n                  <div className=\"space-y-2 text-sm text-gray-400\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>{formatDate(event.startDateTime)}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span className=\"truncate\">{event.location}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-4 w-4\" />\n                        <span>{event.attendingCount}/{event.capacity}</span>\n                      </div>\n                      \n                      {event.averageRating && (\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 text-yellow-400\" />\n                          <span>{event.averageRating.toFixed(1)}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 group-hover:shadow-lg group-hover:shadow-blue-500/25 transition-all duration-300\"\n                    onClick={() => window.location.href = '/'}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Sign In to RSVP\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9772},"server/calendar.ts":{"content":"import { google } from 'googleapis';\n\n// Get the correct redirect URI based on the current environment\nconst getRedirectUri = () => {\n  if (process.env.NODE_ENV === 'production' && process.env.REPLIT_DOMAIN) {\n    return `https://${process.env.REPLIT_DOMAIN}/api/calendar/callback`;\n  }\n  // For development or when domain is not available, use the current request's host\n  return process.env.REPLIT_DOMAIN \n    ? `https://${process.env.REPLIT_DOMAIN}/api/calendar/callback`\n    : 'https://182dd87c-465c-4a94-9c83-04176f5770d9-00-1vxph47kk5vln.sisko.replit.dev/api/calendar/callback';\n};\n\nconst oauth2Client = new google.auth.OAuth2(\n  process.env.GOOGLE_CLIENT_ID,\n  process.env.GOOGLE_CLIENT_SECRET,\n  getRedirectUri()\n);\n\nexport async function createCalendarEvent(accessToken: string, event: any) {\n  try {\n    oauth2Client.setCredentials({ access_token: accessToken });\n    \n    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });\n    \n    const calendarEvent = {\n      summary: event.title,\n      description: event.description,\n      location: event.location,\n      start: {\n        dateTime: event.dateTime,\n        timeZone: 'America/New_York', // You can make this dynamic\n      },\n      end: {\n        dateTime: new Date(new Date(event.dateTime).getTime() + 2 * 60 * 60 * 1000).toISOString(), // Add 2 hours\n        timeZone: 'America/New_York',\n      },\n      attendees: event.attendees || [],\n      reminders: {\n        useDefault: false,\n        overrides: [\n          { method: 'email', minutes: 24 * 60 }, // 1 day before\n          { method: 'popup', minutes: 60 }, // 1 hour before\n        ],\n      },\n    };\n\n    const response = await calendar.events.insert({\n      calendarId: 'primary',\n      requestBody: calendarEvent,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error creating calendar event:', error);\n    throw error;\n  }\n}\n\nexport async function getCalendarAuthUrl(userId: string) {\n  const scopes = [\n    'https://www.googleapis.com/auth/calendar',\n    'https://www.googleapis.com/auth/calendar.events'\n  ];\n\n  const authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: scopes,\n    state: userId, // Pass user ID to identify after callback\n  });\n\n  return authUrl;\n}\n\nexport async function exchangeCodeForTokens(code: string) {\n  try {\n    const { tokens } = await oauth2Client.getToken(code);\n    return tokens;\n  } catch (error) {\n    console.error('Error exchanging code for tokens:', error);\n    throw error;\n  }\n}","size_bytes":2523},"server/notifications.ts":{"content":"import { storage } from \"./storage\";\n\nexport interface NotificationData {\n  id: string;\n  userId: string;\n  title: string;\n  message: string;\n  type: 'event_reminder' | 'event_update' | 'event_cancelled' | 'new_rsvp' | 'calendar_sync';\n  eventId?: string;\n  isRead: boolean;\n  createdAt: Date;\n}\n\nexport class NotificationManager {\n  private notifications: Map<string, NotificationData[]> = new Map();\n\n  async createNotification(notification: Omit<NotificationData, 'id' | 'createdAt' | 'isRead'>) {\n    const id = `notif-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const newNotification: NotificationData = {\n      ...notification,\n      id,\n      isRead: false,\n      createdAt: new Date(),\n    };\n\n    const userNotifications = this.notifications.get(notification.userId) || [];\n    userNotifications.unshift(newNotification);\n    this.notifications.set(notification.userId, userNotifications);\n\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string): Promise<NotificationData[]> {\n    return this.notifications.get(userId) || [];\n  }\n\n  async markAsRead(userId: string, notificationId: string): Promise<boolean> {\n    const userNotifications = this.notifications.get(userId);\n    if (!userNotifications) return false;\n\n    const notification = userNotifications.find(n => n.id === notificationId);\n    if (notification) {\n      notification.isRead = true;\n      return true;\n    }\n    return false;\n  }\n\n  async markAllAsRead(userId: string): Promise<boolean> {\n    const userNotifications = this.notifications.get(userId);\n    if (!userNotifications) return false;\n\n    userNotifications.forEach(notification => {\n      notification.isRead = true;\n    });\n    return true;\n  }\n\n  async deleteNotification(userId: string, notificationId: string): Promise<boolean> {\n    const userNotifications = this.notifications.get(userId);\n    if (!userNotifications) return false;\n\n    const index = userNotifications.findIndex(n => n.id === notificationId);\n    if (index !== -1) {\n      userNotifications.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  // Notification generators for specific events\n  async notifyEventUpdate(eventId: string, message: string) {\n    try {\n      const rsvps = await storage.getRsvpsByEvent(eventId);\n      const event = await storage.getEvent(eventId);\n      \n      if (!event) return;\n\n      for (const rsvp of rsvps) {\n        if (rsvp.status === 'attending') {\n          await this.createNotification({\n            userId: rsvp.userId,\n            title: 'Event Update',\n            message: `${event.title}: ${message}`,\n            type: 'event_update',\n            eventId,\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error sending event update notifications:', error);\n    }\n  }\n\n  async notifyNewRSVP(eventId: string, userName: string) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      await this.createNotification({\n        userId: event.hostId,\n        title: 'New RSVP',\n        message: `${userName} has RSVP'd to your event \"${event.title}\"`,\n        type: 'new_rsvp',\n        eventId,\n      });\n    } catch (error) {\n      console.error('Error sending new RSVP notification:', error);\n    }\n  }\n\n  async notifyEventReminder(eventId: string) {\n    try {\n      const rsvps = await storage.getRsvpsByEvent(eventId);\n      const event = await storage.getEvent(eventId);\n      \n      if (!event) return;\n\n      const eventDate = new Date(event.dateTime);\n      const now = new Date();\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000);\n\n      // Send reminders for events happening tomorrow (1-day reminder)\n      if (eventDate.toDateString() === tomorrow.toDateString()) {\n        for (const rsvp of rsvps) {\n          if (rsvp.status === 'attending') {\n            await this.createNotification({\n              userId: rsvp.userId,\n              title: 'Event Reminder - Tomorrow',\n              message: `Don't forget: \"${event.title}\" is tomorrow at ${eventDate.toLocaleTimeString()}`,\n              type: 'event_reminder',\n              eventId,\n            });\n          }\n        }\n      }\n\n      // Send reminders for events happening within the next hour (1-hour reminder)\n      if (eventDate > now && eventDate <= oneHourFromNow) {\n        for (const rsvp of rsvps) {\n          if (rsvp.status === 'attending') {\n            await this.createNotification({\n              userId: rsvp.userId,\n              title: 'Event Starting Soon!',\n              message: `\"${event.title}\" starts in less than an hour at ${eventDate.toLocaleTimeString()}. Don't miss it!`,\n              type: 'event_reminder',\n              eventId,\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error sending event reminders:', error);\n    }\n  }\n\n  async notifyCalendarSync(userId: string, success: boolean, eventTitle: string) {\n    await this.createNotification({\n      userId,\n      title: success ? 'Calendar Synced' : 'Calendar Sync Failed',\n      message: success \n        ? `\"${eventTitle}\" has been added to your Google Calendar`\n        : `Failed to sync \"${eventTitle}\" to your Google Calendar. Please try again.`,\n      type: 'calendar_sync',\n    });\n  }\n}\n\nexport const notificationManager = new NotificationManager();\n\n// Background job to send daily reminders (in a real app, you'd use a cron job)\nsetInterval(async () => {\n  try {\n    const events = await storage.getEvents({});\n    for (const event of events) {\n      await notificationManager.notifyEventReminder(event.id);\n    }\n  } catch (error) {\n    console.error('Error in daily reminder job:', error);\n  }\n}, 24 * 60 * 60 * 1000); // Run daily\n\n// Background job to send hourly reminders for events starting soon\nsetInterval(async () => {\n  try {\n    const events = await storage.getEvents({});\n    for (const event of events) {\n      await notificationManager.notifyEventReminder(event.id);\n    }\n  } catch (error) {\n    console.error('Error in hourly reminder job:', error);\n  }\n}, 60 * 60 * 1000); // Run every hour","size_bytes":6199},"client/src/components/NotificationDropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuHeader,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Bell, Check, X, Calendar, Users, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: 'event_reminder' | 'event_update' | 'event_cancelled' | 'new_rsvp' | 'rsvp_update' | 'rsvp_confirmation' | 'calendar_sync';\n  eventId?: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport function NotificationDropdown() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n  });\n\n  const unreadCount = Array.isArray(notifications) ? notifications.filter((n: Notification) => !n.isRead).length : 0;\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/notifications/${id}/read`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/notifications/read-all\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/notifications/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'event_reminder':\n        return <Bell className=\"h-4 w-4 text-blue-500\" />;\n      case 'event_update':\n        return <AlertCircle className=\"h-4 w-4 text-orange-500\" />;\n      case 'event_cancelled':\n        return <X className=\"h-4 w-4 text-red-500\" />;\n      case 'new_rsvp':\n      case 'rsvp_update':\n        return <Users className=\"h-4 w-4 text-green-500\" />;\n      case 'rsvp_confirmation':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'calendar_sync':\n        return <Calendar className=\"h-4 w-4 text-purple-500\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMins = Math.floor(diffInMs / (1000 * 60));\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n    if (diffInMins < 60) {\n      return `${diffInMins}m ago`;\n    } else if (diffInHours < 24) {\n      return `${diffInHours}h ago`;\n    } else {\n      return `${diffInDays}d ago`;\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative hover:bg-gray-100 dark:hover:bg-gray-800\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-red-500 text-white border-2 border-white dark:border-gray-900\">\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-80 p-0\" align=\"end\" forceMount>\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h3 className=\"font-semibold text-sm\">Notifications</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              className=\"text-xs h-auto p-1\"\n            >\n              Mark all read\n            </Button>\n          )}\n        </div>\n        <ScrollArea className=\"h-[400px]\">\n          {Array.isArray(notifications) && notifications.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-gray-500\">\n              No notifications yet\n            </div>\n          ) : (\n            <div className=\"p-2\">\n              {Array.isArray(notifications) && notifications.map((notification: Notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-3 rounded-lg mb-2 ${\n                    notification.isRead\n                      ? 'bg-gray-50 dark:bg-gray-800'\n                      : 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {notification.title}\n                        </p>\n                        <div className=\"flex items-center space-x-1\">\n                          {!notification.isRead && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6\"\n                              onClick={() => markAsReadMutation.mutate(notification.id)}\n                            >\n                              <Check className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                            onClick={() => deleteNotificationMutation.mutate(notification.id)}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-300 mt-1\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {formatTime(notification.createdAt)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":7048}}}